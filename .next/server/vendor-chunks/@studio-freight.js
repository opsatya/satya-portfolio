"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@studio-freight";
exports.ids = ["vendor-chunks/@studio-freight"];
exports.modules = {

/***/ "(ssr)/./node_modules/@studio-freight/lenis/dist/lenis.mjs":
/*!***********************************************************!*\
  !*** ./node_modules/@studio-freight/lenis/dist/lenis.mjs ***!
  \***********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ Lenis)\n/* harmony export */ });\nfunction t(t, e, i) {\n    return Math.max(t, Math.min(e, i));\n}\nclass Animate {\n    advance(e) {\n        if (!this.isRunning) return;\n        let i = !1;\n        if (this.lerp) this.value = (s = this.value, o = this.to, n = 60 * this.lerp, r = e, function(t, e, i) {\n            return (1 - i) * t + i * e;\n        }(s, o, 1 - Math.exp(-n * r))), Math.round(this.value) === this.to && (this.value = this.to, i = !0);\n        else {\n            this.currentTime += e;\n            const s = t(0, this.currentTime / this.duration, 1);\n            i = s >= 1;\n            const o = i ? 1 : this.easing(s);\n            this.value = this.from + (this.to - this.from) * o;\n        }\n        var s, o, n, r;\n        this.onUpdate?.(this.value, i), i && this.stop();\n    }\n    stop() {\n        this.isRunning = !1;\n    }\n    fromTo(t, e, { lerp: i = .1, duration: s = 1, easing: o = (t)=>t, onStart: n, onUpdate: r }) {\n        this.from = this.value = t, this.to = e, this.lerp = i, this.duration = s, this.easing = o, this.currentTime = 0, this.isRunning = !0, n?.(), this.onUpdate = r;\n    }\n}\nclass Dimensions {\n    constructor({ wrapper: t, content: e, autoResize: i = !0, debounce: s = 250 } = {}){\n        this.resize = ()=>{\n            this.onWrapperResize(), this.onContentResize();\n        };\n        this.onWrapperResize = ()=>{\n            this.wrapper === window ? (this.width = window.innerWidth, this.height = window.innerHeight) : (this.width = this.wrapper.clientWidth, this.height = this.wrapper.clientHeight);\n        };\n        this.onContentResize = ()=>{\n            this.wrapper === window ? (this.scrollHeight = this.content.scrollHeight, this.scrollWidth = this.content.scrollWidth) : (this.scrollHeight = this.wrapper.scrollHeight, this.scrollWidth = this.wrapper.scrollWidth);\n        };\n        this.wrapper = t, this.content = e, i && (this.debouncedResize = function(t, e) {\n            let i;\n            return function() {\n                let s = arguments, o = this;\n                clearTimeout(i), i = setTimeout(function() {\n                    t.apply(o, s);\n                }, e);\n            };\n        }(this.resize, s), this.wrapper === window ? window.addEventListener(\"resize\", this.debouncedResize, !1) : (this.wrapperResizeObserver = new ResizeObserver(this.debouncedResize), this.wrapperResizeObserver.observe(this.wrapper)), this.contentResizeObserver = new ResizeObserver(this.debouncedResize), this.contentResizeObserver.observe(this.content)), this.resize();\n    }\n    destroy() {\n        this.wrapperResizeObserver?.disconnect(), this.contentResizeObserver?.disconnect(), window.removeEventListener(\"resize\", this.debouncedResize, !1);\n    }\n    get limit() {\n        return {\n            x: this.scrollWidth - this.width,\n            y: this.scrollHeight - this.height\n        };\n    }\n}\nclass Emitter {\n    constructor(){\n        this.events = {};\n    }\n    emit(t, ...e) {\n        let i = this.events[t] || [];\n        for(let t = 0, s = i.length; t < s; t++)i[t](...e);\n    }\n    on(t, e) {\n        return this.events[t]?.push(e) || (this.events[t] = [\n            e\n        ]), ()=>{\n            this.events[t] = this.events[t]?.filter((t)=>e !== t);\n        };\n    }\n    off(t, e) {\n        this.events[t] = this.events[t]?.filter((t)=>e !== t);\n    }\n    destroy() {\n        this.events = {};\n    }\n}\nconst e = 100 / 6;\nclass VirtualScroll {\n    constructor(t, { wheelMultiplier: e1 = 1, touchMultiplier: i = 1 }){\n        this.onTouchStart = (t)=>{\n            const { clientX: e, clientY: i } = t.targetTouches ? t.targetTouches[0] : t;\n            this.touchStart.x = e, this.touchStart.y = i, this.lastDelta = {\n                x: 0,\n                y: 0\n            }, this.emitter.emit(\"scroll\", {\n                deltaX: 0,\n                deltaY: 0,\n                event: t\n            });\n        };\n        this.onTouchMove = (t)=>{\n            const { clientX: e, clientY: i } = t.targetTouches ? t.targetTouches[0] : t, s = -(e - this.touchStart.x) * this.touchMultiplier, o = -(i - this.touchStart.y) * this.touchMultiplier;\n            this.touchStart.x = e, this.touchStart.y = i, this.lastDelta = {\n                x: s,\n                y: o\n            }, this.emitter.emit(\"scroll\", {\n                deltaX: s,\n                deltaY: o,\n                event: t\n            });\n        };\n        this.onTouchEnd = (t)=>{\n            this.emitter.emit(\"scroll\", {\n                deltaX: this.lastDelta.x,\n                deltaY: this.lastDelta.y,\n                event: t\n            });\n        };\n        this.onWheel = (t)=>{\n            let { deltaX: i, deltaY: s, deltaMode: o } = t;\n            i *= 1 === o ? e : 2 === o ? this.windowWidth : 1, s *= 1 === o ? e : 2 === o ? this.windowHeight : 1, i *= this.wheelMultiplier, s *= this.wheelMultiplier, this.emitter.emit(\"scroll\", {\n                deltaX: i,\n                deltaY: s,\n                event: t\n            });\n        };\n        this.onWindowResize = ()=>{\n            this.windowWidth = window.innerWidth, this.windowHeight = window.innerHeight;\n        };\n        this.element = t, this.wheelMultiplier = e1, this.touchMultiplier = i, this.touchStart = {\n            x: null,\n            y: null\n        }, this.emitter = new Emitter, window.addEventListener(\"resize\", this.onWindowResize, !1), this.onWindowResize(), this.element.addEventListener(\"wheel\", this.onWheel, {\n            passive: !1\n        }), this.element.addEventListener(\"touchstart\", this.onTouchStart, {\n            passive: !1\n        }), this.element.addEventListener(\"touchmove\", this.onTouchMove, {\n            passive: !1\n        }), this.element.addEventListener(\"touchend\", this.onTouchEnd, {\n            passive: !1\n        });\n    }\n    on(t, e) {\n        return this.emitter.on(t, e);\n    }\n    destroy() {\n        this.emitter.destroy(), window.removeEventListener(\"resize\", this.onWindowResize, !1), this.element.removeEventListener(\"wheel\", this.onWheel, {\n            passive: !1\n        }), this.element.removeEventListener(\"touchstart\", this.onTouchStart, {\n            passive: !1\n        }), this.element.removeEventListener(\"touchmove\", this.onTouchMove, {\n            passive: !1\n        }), this.element.removeEventListener(\"touchend\", this.onTouchEnd, {\n            passive: !1\n        });\n    }\n}\nclass Lenis {\n    constructor({ wrapper: t = window, content: e = document.documentElement, wheelEventsTarget: i = t, eventsTarget: s = i, smoothWheel: o = !0, syncTouch: n = !1, syncTouchLerp: r = .075, touchInertiaMultiplier: l = 35, duration: h, easing: a = (t)=>Math.min(1, 1.001 - Math.pow(2, -10 * t)), lerp: c = !h && .1, infinite: d = !1, orientation: p = \"vertical\", gestureOrientation: u = \"vertical\", touchMultiplier: m = 1, wheelMultiplier: v = 1, autoResize: g = !0, __experimental__naiveDimensions: S = !1 } = {}){\n        this.__isSmooth = !1, this.__isScrolling = !1, this.__isStopped = !1, this.__isLocked = !1, this.onVirtualScroll = ({ deltaX: t, deltaY: e, event: i })=>{\n            if (i.ctrlKey) return;\n            const s = i.type.includes(\"touch\"), o = i.type.includes(\"wheel\");\n            if (this.options.syncTouch && s && \"touchstart\" === i.type && !this.isStopped && !this.isLocked) return void this.reset();\n            const n = 0 === t && 0 === e, r = \"vertical\" === this.options.gestureOrientation && 0 === e || \"horizontal\" === this.options.gestureOrientation && 0 === t;\n            if (n || r) return;\n            let l = i.composedPath();\n            if (l = l.slice(0, l.indexOf(this.rootElement)), l.find((t)=>{\n                var e, i, n, r, l;\n                return (null === (e = t.hasAttribute) || void 0 === e ? void 0 : e.call(t, \"data-lenis-prevent\")) || s && (null === (i = t.hasAttribute) || void 0 === i ? void 0 : i.call(t, \"data-lenis-prevent-touch\")) || o && (null === (n = t.hasAttribute) || void 0 === n ? void 0 : n.call(t, \"data-lenis-prevent-wheel\")) || (null === (r = t.classList) || void 0 === r ? void 0 : r.contains(\"lenis\")) && !(null === (l = t.classList) || void 0 === l ? void 0 : l.contains(\"lenis-stopped\"));\n            })) return;\n            if (this.isStopped || this.isLocked) return void i.preventDefault();\n            if (this.isSmooth = this.options.syncTouch && s || this.options.smoothWheel && o, !this.isSmooth) return this.isScrolling = !1, void this.animate.stop();\n            i.preventDefault();\n            let h = e;\n            \"both\" === this.options.gestureOrientation ? h = Math.abs(e) > Math.abs(t) ? e : t : \"horizontal\" === this.options.gestureOrientation && (h = t);\n            const a = s && this.options.syncTouch, c = s && \"touchend\" === i.type && Math.abs(h) > 5;\n            c && (h = this.velocity * this.options.touchInertiaMultiplier), this.scrollTo(this.targetScroll + h, Object.assign({\n                programmatic: !1\n            }, a ? {\n                lerp: c ? this.options.syncTouchLerp : 1\n            } : {\n                lerp: this.options.lerp,\n                duration: this.options.duration,\n                easing: this.options.easing\n            }));\n        }, this.onNativeScroll = ()=>{\n            if (!this.__preventNextScrollEvent && !this.isScrolling) {\n                const t = this.animatedScroll;\n                this.animatedScroll = this.targetScroll = this.actualScroll, this.velocity = 0, this.direction = Math.sign(this.animatedScroll - t), this.emit();\n            }\n        }, window.lenisVersion = \"1.0.42\", t !== document.documentElement && t !== document.body || (t = window), this.options = {\n            wrapper: t,\n            content: e,\n            wheelEventsTarget: i,\n            eventsTarget: s,\n            smoothWheel: o,\n            syncTouch: n,\n            syncTouchLerp: r,\n            touchInertiaMultiplier: l,\n            duration: h,\n            easing: a,\n            lerp: c,\n            infinite: d,\n            gestureOrientation: u,\n            orientation: p,\n            touchMultiplier: m,\n            wheelMultiplier: v,\n            autoResize: g,\n            __experimental__naiveDimensions: S\n        }, this.animate = new Animate, this.emitter = new Emitter, this.dimensions = new Dimensions({\n            wrapper: t,\n            content: e,\n            autoResize: g\n        }), this.toggleClassName(\"lenis\", !0), this.velocity = 0, this.isLocked = !1, this.isStopped = !1, this.isSmooth = n || o, this.isScrolling = !1, this.targetScroll = this.animatedScroll = this.actualScroll, this.options.wrapper.addEventListener(\"scroll\", this.onNativeScroll, !1), this.virtualScroll = new VirtualScroll(s, {\n            touchMultiplier: m,\n            wheelMultiplier: v\n        }), this.virtualScroll.on(\"scroll\", this.onVirtualScroll);\n    }\n    destroy() {\n        this.emitter.destroy(), this.options.wrapper.removeEventListener(\"scroll\", this.onNativeScroll, !1), this.virtualScroll.destroy(), this.dimensions.destroy(), this.toggleClassName(\"lenis\", !1), this.toggleClassName(\"lenis-smooth\", !1), this.toggleClassName(\"lenis-scrolling\", !1), this.toggleClassName(\"lenis-stopped\", !1), this.toggleClassName(\"lenis-locked\", !1);\n    }\n    on(t, e) {\n        return this.emitter.on(t, e);\n    }\n    off(t, e) {\n        return this.emitter.off(t, e);\n    }\n    setScroll(t) {\n        this.isHorizontal ? this.rootElement.scrollLeft = t : this.rootElement.scrollTop = t;\n    }\n    resize() {\n        this.dimensions.resize();\n    }\n    emit() {\n        this.emitter.emit(\"scroll\", this);\n    }\n    reset() {\n        this.isLocked = !1, this.isScrolling = !1, this.animatedScroll = this.targetScroll = this.actualScroll, this.velocity = 0, this.animate.stop();\n    }\n    start() {\n        this.isStopped && (this.isStopped = !1, this.reset());\n    }\n    stop() {\n        this.isStopped || (this.isStopped = !0, this.animate.stop(), this.reset());\n    }\n    raf(t) {\n        const e = t - (this.time || t);\n        this.time = t, this.animate.advance(.001 * e);\n    }\n    scrollTo(e, { offset: i = 0, immediate: s = !1, lock: o = !1, duration: n = this.options.duration, easing: r = this.options.easing, lerp: l = !n && this.options.lerp, onComplete: h, force: a = !1, programmatic: c = !0 } = {}) {\n        if (!this.isStopped && !this.isLocked || a) {\n            if ([\n                \"top\",\n                \"left\",\n                \"start\"\n            ].includes(e)) e = 0;\n            else if ([\n                \"bottom\",\n                \"right\",\n                \"end\"\n            ].includes(e)) e = this.limit;\n            else {\n                let t;\n                if (\"string\" == typeof e ? t = document.querySelector(e) : (null == e ? void 0 : e.nodeType) && (t = e), t) {\n                    if (this.options.wrapper !== window) {\n                        const t = this.options.wrapper.getBoundingClientRect();\n                        i -= this.isHorizontal ? t.left : t.top;\n                    }\n                    const s = t.getBoundingClientRect();\n                    e = (this.isHorizontal ? s.left : s.top) + this.animatedScroll;\n                }\n            }\n            if (\"number\" == typeof e) {\n                if (e += i, e = Math.round(e), this.options.infinite ? c && (this.targetScroll = this.animatedScroll = this.scroll) : e = t(0, e, this.limit), s) return this.animatedScroll = this.targetScroll = e, this.setScroll(this.scroll), this.reset(), void (null == h || h(this));\n                if (!c) {\n                    if (e === this.targetScroll) return;\n                    this.targetScroll = e;\n                }\n                this.animate.fromTo(this.animatedScroll, e, {\n                    duration: n,\n                    easing: r,\n                    lerp: l,\n                    onStart: ()=>{\n                        o && (this.isLocked = !0), this.isScrolling = !0;\n                    },\n                    onUpdate: (t, e)=>{\n                        this.isScrolling = !0, this.velocity = t - this.animatedScroll, this.direction = Math.sign(this.velocity), this.animatedScroll = t, this.setScroll(this.scroll), c && (this.targetScroll = t), e || this.emit(), e && (this.reset(), this.emit(), null == h || h(this), this.__preventNextScrollEvent = !0, requestAnimationFrame(()=>{\n                            delete this.__preventNextScrollEvent;\n                        }));\n                    }\n                });\n            }\n        }\n    }\n    get rootElement() {\n        return this.options.wrapper === window ? document.documentElement : this.options.wrapper;\n    }\n    get limit() {\n        return this.options.__experimental__naiveDimensions ? this.isHorizontal ? this.rootElement.scrollWidth - this.rootElement.clientWidth : this.rootElement.scrollHeight - this.rootElement.clientHeight : this.dimensions.limit[this.isHorizontal ? \"x\" : \"y\"];\n    }\n    get isHorizontal() {\n        return \"horizontal\" === this.options.orientation;\n    }\n    get actualScroll() {\n        return this.isHorizontal ? this.rootElement.scrollLeft : this.rootElement.scrollTop;\n    }\n    get scroll() {\n        return this.options.infinite ? (t = this.animatedScroll, e = this.limit, (t % e + e) % e) : this.animatedScroll;\n        var t, e;\n    }\n    get progress() {\n        return 0 === this.limit ? 1 : this.scroll / this.limit;\n    }\n    get isSmooth() {\n        return this.__isSmooth;\n    }\n    set isSmooth(t) {\n        this.__isSmooth !== t && (this.__isSmooth = t, this.toggleClassName(\"lenis-smooth\", t));\n    }\n    get isScrolling() {\n        return this.__isScrolling;\n    }\n    set isScrolling(t) {\n        this.__isScrolling !== t && (this.__isScrolling = t, this.toggleClassName(\"lenis-scrolling\", t));\n    }\n    get isStopped() {\n        return this.__isStopped;\n    }\n    set isStopped(t) {\n        this.__isStopped !== t && (this.__isStopped = t, this.toggleClassName(\"lenis-stopped\", t));\n    }\n    get isLocked() {\n        return this.__isLocked;\n    }\n    set isLocked(t) {\n        this.__isLocked !== t && (this.__isLocked = t, this.toggleClassName(\"lenis-locked\", t));\n    }\n    get className() {\n        let t = \"lenis\";\n        return this.isStopped && (t += \" lenis-stopped\"), this.isLocked && (t += \" lenis-locked\"), this.isScrolling && (t += \" lenis-scrolling\"), this.isSmooth && (t += \" lenis-smooth\"), t;\n    }\n    toggleClassName(t, e) {\n        this.rootElement.classList.toggle(t, e), this.emitter.emit(\"className change\", this);\n    }\n}\n //# sourceMappingURL=lenis.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@studio-freight/lenis/dist/lenis.mjs\n");

/***/ })

};
;