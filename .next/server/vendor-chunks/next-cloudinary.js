"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/next-cloudinary";
exports.ids = ["vendor-chunks/next-cloudinary"];
exports.modules = {

/***/ "(ssr)/./node_modules/next-cloudinary/dist/index.mjs":
/*!*****************************************************!*\
  !*** ./node_modules/next-cloudinary/dist/index.mjs ***!
  \*****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   CldImage: () => (/* binding */ ge),\n/* harmony export */   CldOgImage: () => (/* binding */ me),\n/* harmony export */   CldUploadButton: () => (/* binding */ Ce),\n/* harmony export */   CldUploadWidget: () => (/* binding */ q),\n/* harmony export */   CldVideoPlayer: () => (/* binding */ Ie),\n/* harmony export */   cloudinaryLoader: () => (/* binding */ ee),\n/* harmony export */   getCldImageUrl: () => (/* binding */ I),\n/* harmony export */   getCldOgImageUrl: () => (/* binding */ $e),\n/* harmony export */   getCldVideoUrl: () => (/* binding */ de)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var next_image__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/image */ \"(ssr)/./node_modules/next/image.js\");\n/* harmony import */ var _cloudinary_util_util__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @cloudinary-util/util */ \"(ssr)/./node_modules/@cloudinary-util/util/dist/index.mjs\");\n/* harmony import */ var _cloudinary_util_url_loader__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @cloudinary-util/url-loader */ \"(ssr)/./node_modules/@cloudinary-util/url-loader/dist/chunk-P4VNHLSM.mjs\");\n/* harmony import */ var next_package_json__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/package.json */ \"(ssr)/./node_modules/next/package.json\");\n/* harmony import */ var next_head__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! next/head */ \"(ssr)/./node_modules/next/dist/client/components/noop-head.js\");\n/* harmony import */ var next_script__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! next/script */ \"(ssr)/./node_modules/next/script.js\");\n\n\n\n\nasync function B(e) {\n    let { src: o } = e;\n    try {\n        await new Promise((l, d)=>{\n            fetch(o).then((t)=>{\n                if (!t.ok) {\n                    d(t);\n                    return;\n                }\n                l(t);\n            });\n        });\n    } catch (l) {\n        return l.status === 423 ? await B(e) : !1;\n    }\n    return !0;\n}\nfunction b(e) {\n    if (!e) throw new Error(\"A Cloudinary Cloud name is required, please make sure NEXT_PUBLIC_CLOUDINARY_CLOUD_NAME is set and configured in your environment.\");\n}\n\n\nvar ue = {\n    name: \"next-cloudinary\",\n    version: \"5.20.0\",\n    license: \"MIT\",\n    main: \"./dist/index.js\",\n    module: \"./dist/index.mjs\",\n    types: \"./dist/index.d.ts\",\n    source: \"src/index.ts\",\n    scripts: {\n        build: \"tsup\",\n        dev: \"tsup --watch\",\n        prepublishOnly: \"cp ../README.md . && cp ../LICENSE . && yarn build\",\n        postpublish: \"rm ./README.md && rm ./LICENSE\",\n        test: \"jest\",\n        \"test:app\": 'NEXT_PUBLIC_CLOUDINARY_CLOUD_NAME=\"test\" yarn build && cd tests/nextjs-app && yarn build'\n    },\n    dependencies: {\n        \"@cloudinary-util/url-loader\": \"^4.1.1\",\n        \"@cloudinary-util/util\": \"^2.3.0\"\n    },\n    devDependencies: {\n        \"@babel/core\": \"^7.23.2\",\n        \"@babel/preset-env\": \"^7.23.2\",\n        \"@types/jest\": \"^29.5.6\",\n        \"@types/react\": \"^18.2.33\",\n        \"@types/react-dom\": \"^18.2.14\",\n        \"babel-jest\": \"^29.7.0\",\n        dotenv: \"^16.3.1\",\n        jest: \"^29.7.0\",\n        \"jest-environment-jsdom\": \"^29.7.0\",\n        mkdirp: \"^3.0.1\",\n        \"ts-jest\": \"^29.1.1\",\n        tsup: \"^7.2.0\",\n        typescript: \"^5.2.2\"\n    },\n    peerDependencies: {\n        next: \"^12 || ^13 || ^14\",\n        react: \"^17 || ^18\"\n    }\n};\nvar Y = \"V\", $ = ue.version, z = next_package_json__WEBPACK_IMPORTED_MODULE_2__.version;\nfunction I(e, o, l) {\n    var t, r;\n    let d = (r = (t = o == null ? void 0 : o.cloud) == null ? void 0 : t.cloudName) != null ? r : \"dcdft71qa\";\n    return b(d), (0,_cloudinary_util_url_loader__WEBPACK_IMPORTED_MODULE_3__.constructCloudinaryUrl)({\n        options: e,\n        config: Object.assign({\n            cloud: {\n                cloudName: d\n            }\n        }, o),\n        analytics: Object.assign({\n            sdkCode: Y,\n            sdkSemver: $,\n            techVersion: z,\n            feature: \"\"\n        }, l)\n    });\n}\nfunction ee({ loaderOptions: e, imageProps: o, cldOptions: l, cldConfig: d = {} }) {\n    let t = {\n        ...o,\n        ...l\n    };\n    t.width = typeof t.width == \"string\" ? parseInt(t.width) : t.width, t.height = typeof t.height == \"string\" ? parseInt(t.height) : t.height;\n    let r;\n    return typeof (e == null ? void 0 : e.width) == \"number\" && typeof t.width == \"number\" && e.width !== t.width ? r = e.width : typeof (e == null ? void 0 : e.width) == \"number\" && typeof (t == null ? void 0 : t.width) != \"number\" && (r = e.width, t.width = r), t.width && r && r < t.width && (t.widthResize = e.width), I(t, d);\n}\nvar ve = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.forwardRef)(function(o, l) {\n    let d = !1, t = [\n        \"deliveryType\",\n        \"preserveTransformations\",\n        \"strictTransformations\",\n        \"assetType\"\n    ];\n    _cloudinary_util_url_loader__WEBPACK_IMPORTED_MODULE_3__.transformationPlugins.forEach(({ props: n })=>{\n        Object.keys(n).forEach((O)=>{\n            if (t.includes(O)) throw new Error(`Option ${O} already exists!`);\n            t.push(O);\n        });\n    });\n    let r = {\n        alt: o.alt,\n        src: o.src\n    };\n    Object.keys(o).filter((n)=>!t.includes(n)).forEach((n)=>r[n] = o[n]);\n    let p = Object.keys(r).map((n)=>`${n}:${r[n]}`).join(\";\"), [y, C] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(p), c = {};\n    if (t.forEach((n)=>{\n        o[n] && (c[n] = o[n] || void 0);\n    }), o.preserveTransformations) try {\n        let n = (0,_cloudinary_util_util__WEBPACK_IMPORTED_MODULE_4__.getTransformations)(o.src).map((h)=>h.join(\",\"));\n        c.rawTransformations = [\n            ...n.flat(),\n            ...o.rawTransformations || []\n        ];\n    } catch (n) {\n        console.warn(`Failed to preserve transformations: ${n.message}`);\n    }\n    let i = {\"deviceSizes\":[640,750,828,1080,1200,1920,2048,3840],\"imageSizes\":[16,32,48,64,96,128,256,384],\"path\":\"/_next/image\",\"loader\":\"default\",\"dangerouslyAllowSVG\":false,\"unoptimized\":false,\"domains\":[],\"remotePatterns\":[]} || {};\n    (o.unoptimized === !0 || (i == null ? void 0 : i.unoptimized) === !0) && (r.src = I({\n        ...c,\n        width: r.width,\n        height: r.height,\n        src: r.src,\n        format: \"default\",\n        quality: \"default\"\n    }, o.config));\n    async function U(n) {\n        let h = !0;\n        if (d) return;\n        if (d = !0, typeof o.onError == \"function\") {\n            let w = o.onError(n);\n            typeof w == \"boolean\" && w === !1 && (h = !1);\n        } else typeof o.onError == \"boolean\" && o.onError === !1 && (h = !1);\n        if (h === !1) return;\n        let O = n.target;\n        await B({\n            src: O.src\n        }) && C(`${p};${Date.now()}`);\n    }\n    let E = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(U, [\n        B,\n        p\n    ]), P = next_image__WEBPACK_IMPORTED_MODULE_1__;\n    return \"default\" in P && (P = P.default), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(P, {\n        key: y,\n        ...r,\n        loader: (n)=>ee({\n                loaderOptions: n,\n                imageProps: r,\n                cldOptions: c,\n                cldConfig: o.config\n            }),\n        onError: E,\n        ref: l\n    });\n}), ge = ve;\n\n\nvar Me = \"summary_large_image\", Ve = ({ excludeTags: e = [], twitterTitle: o, keys: l = {}, ...d })=>{\n    let { alt: t } = d, r = {\n        ...d,\n        crop: d.crop || \"fill\",\n        gravity: d.gravity || \"center\",\n        height: d.height || 1254,\n        src: d.src,\n        width: d.width || 2400,\n        widthResize: d.width || 1200\n    }, p = typeof r.width == \"string\" ? parseInt(r.width) : r.width, y = typeof r.height == \"string\" ? parseInt(r.height) : r.height;\n    typeof y == \"number\" && typeof p == \"number\" && (y = 1200 / p * y), p = 1200;\n    let C = I({\n        ...r,\n        format: d.format || \"jpg\"\n    }), c = I({\n        ...r,\n        format: d.format || \"webp\"\n    }), i = {\n        \"og:image\": \"og-image\",\n        \"og:image:secure_url\": \"og-image-secureurl\",\n        \"og:image:width\": \"og-image-width\",\n        \"og:image:height\": \"og-image-height\",\n        \"og:image:alt\": \"og-image-alt\",\n        \"twitter:title\": \"twitter-title\",\n        \"twitter:card\": \"twitter-card\",\n        \"twitter:image\": \"twitter-image\",\n        ...l\n    };\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(next_head__WEBPACK_IMPORTED_MODULE_5__, null, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"meta\", {\n        key: i[\"og:image\"],\n        property: \"og:image\",\n        content: C\n    }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"meta\", {\n        key: i[\"og:image:secure_url\"],\n        property: \"og:image:secure_url\",\n        content: C\n    }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"meta\", {\n        key: i[\"og:image:width\"],\n        property: \"og:image:width\",\n        content: `${p}`\n    }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"meta\", {\n        key: i[\"og:image:height\"],\n        property: \"og:image:height\",\n        content: `${y}`\n    }), t && /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"meta\", {\n        key: i[\"og:image:alt\"],\n        property: \"og:image:alt\",\n        content: t\n    }), !e.includes(\"twitter:title\") && /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"meta\", {\n        key: i[\"twitter:title\"],\n        property: \"twitter:title\",\n        content: o || \" \"\n    }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"meta\", {\n        key: i[\"twitter:card\"],\n        property: \"twitter:card\",\n        content: Me\n    }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"meta\", {\n        key: i[\"twitter:image\"],\n        property: \"twitter:image\",\n        content: c\n    }));\n}, me = Ve;\n\n\n\nfunction fe(e) {\n    return window && \"requestIdleCallback\" in window ? requestIdleCallback(e) : setTimeout(()=>e(), 1);\n}\nvar De = [\n    \"success\",\n    \"display-changed\"\n], Se = {\n    abort: \"onAbort\",\n    \"batch-cancelled\": \"onBatchCancelled\",\n    \"display-changed\": \"onDisplayChanged\",\n    publicid: \"onPublicId\",\n    \"queues-end\": \"onQueuesEnd\",\n    \"queues-start\": \"onQueuesStart\",\n    retry: \"onRetry\",\n    \"show-completed\": \"onShowCompleted\",\n    \"source-changed\": \"onSourceChanged\",\n    success: \"onSuccess\",\n    tags: \"onTags\",\n    \"upload-added\": \"onUploadAdded\"\n}, ke = ({ children: e, onClose: o, onError: l, onOpen: d, onUpload: t, options: r, signatureEndpoint: p, uploadPreset: y, ...C })=>{\n    let c = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(), i = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(), U = !!p, [E, P] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(void 0), [n, h] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(void 0), [O, W] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(!0), w = {\n        cloudName: \"dcdft71qa\",\n        uploadPreset: y || process.env.NEXT_PUBLIC_CLOUDINARY_UPLOAD_PRESET,\n        apiKey: process.env.NEXT_PUBLIC_CLOUDINARY_API_KEY,\n        ...r\n    };\n    b(\"dcdft71qa\"), U && (w.uploadSignature = _, w.apiKey || console.warn(\"Missing dependency: Signed Upload requires an API key\")), (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        if (typeof n == \"undefined\") return;\n        let a = n.event === \"success\", g = n.event === \"display-changed\" && n.info === \"hidden\";\n        a && typeof t == \"function\" && t(n, i.current), g && typeof o == \"function\" && o(i.current);\n    }, [\n        n\n    ]), (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        E && typeof l == \"function\" && l(E, i.current);\n    }, [\n        E\n    ]);\n    function D() {\n        W(!1), c.current || (c.current = window.cloudinary), fe(()=>{\n            i.current || (i.current = A());\n        });\n    }\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>()=>{\n            var a;\n            (a = i.current) == null || a.destroy(), i.current = void 0;\n        }, []);\n    function _(a, g) {\n        if (typeof p == \"undefined\") throw Error(\"Failed to generate signature: signatureEndpoint undefined.\");\n        fetch(p, {\n            method: \"POST\",\n            body: JSON.stringify({\n                paramsToSign: g\n            })\n        }).then((m)=>m.json()).then(({ signature: m })=>{\n            a(m);\n        });\n    }\n    function u(a, g = []) {\n        if (i.current || (i.current = A()), typeof (i == null ? void 0 : i.current[a]) == \"function\") return i.current[a](...g);\n    }\n    function M(a) {\n        u(\"close\", [\n            a\n        ]);\n    }\n    function x(a) {\n        return u(\"destroy\", [\n            a\n        ]);\n    }\n    function S() {\n        u(\"hide\");\n    }\n    function k() {\n        return u(\"isDestroyed\");\n    }\n    function V() {\n        return u(\"isMinimized\");\n    }\n    function F() {\n        return u(\"isShowing\");\n    }\n    function T() {\n        u(\"minimize\");\n    }\n    function H(a, g) {\n        u(\"open\", [\n            a,\n            g\n        ]), typeof d == \"function\" && d(i.current);\n    }\n    function J() {\n        u(\"show\");\n    }\n    function j() {\n        u(\"update\");\n    }\n    let X = {\n        close: M,\n        destroy: x,\n        hide: S,\n        isDestroyed: k,\n        isMinimized: V,\n        isShowing: F,\n        minimize: T,\n        open: H,\n        show: J,\n        update: j\n    };\n    function A() {\n        var a;\n        return (a = c.current) == null ? void 0 : a.createUploadWidget(w, (g, m)=>{\n            if (g && g !== null && P(g), typeof (m == null ? void 0 : m.event) == \"string\") {\n                De.includes(m == null ? void 0 : m.event) && h(m);\n                let N = Se[m.event];\n                if (typeof N == \"string\" && typeof C[N] == \"function\" && typeof C[N]) {\n                    let Z = C[N];\n                    Z(m, {\n                        widget: i.current,\n                        ...X\n                    });\n                }\n            }\n        });\n    }\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment, null, typeof e == \"function\" && e({\n        cloudinary: c.current,\n        widget: i.current,\n        results: n,\n        error: E,\n        isLoading: O,\n        ...X\n    }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(next_script__WEBPACK_IMPORTED_MODULE_6__, {\n        id: `cloudinary-uploadwidget-${Math.floor(Math.random() * 100)}`,\n        src: \"https://upload-widget.cloudinary.com/global/all.js\",\n        onLoad: D,\n        onError: (a)=>console.error(`Failed to load Cloudinary Upload Widget: ${a.message}`)\n    }));\n}, q = ke;\nvar je = ({ className: e, children: o, onClick: l, onError: d, onOpen: t, onUpload: r, onAbort: p, onBatchCancelled: y, onClose: C, onDisplayChanged: c, onPublicId: i, onQueuesEnd: U, onQueuesStart: E, onRetry: P, onShowCompleted: n, onSourceChanged: h, onSuccess: O, onTags: W, onUploadAdded: w, options: D, signatureEndpoint: _, uploadPreset: u, ...M })=>/*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment, null, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(q, {\n        onError: d,\n        onOpen: t,\n        onUpload: r,\n        onAbort: p,\n        onBatchCancelled: y,\n        onClose: C,\n        onDisplayChanged: c,\n        onPublicId: i,\n        onQueuesEnd: U,\n        onQueuesStart: E,\n        onRetry: P,\n        onShowCompleted: n,\n        onSourceChanged: h,\n        onSuccess: O,\n        onTags: W,\n        onUploadAdded: w,\n        options: D,\n        signatureEndpoint: _,\n        uploadPreset: u\n    }, ({ open: x, isLoading: S })=>{\n        function k(V) {\n            V.preventDefault(), x(), typeof l == \"function\" && l(V);\n        }\n        return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"button\", {\n            ...M,\n            className: e || \"\",\n            onClick: k,\n            disabled: S\n        }, o || \"Upload\");\n    })), Ce = je;\n\n\n\n\n\nfunction de(e, o, l) {\n    var t, r;\n    let d = (r = (t = o == null ? void 0 : o.cloud) == null ? void 0 : t.cloudName) != null ? r : \"dcdft71qa\";\n    return b(d), (0,_cloudinary_util_url_loader__WEBPACK_IMPORTED_MODULE_3__.constructCloudinaryUrl)({\n        options: {\n            assetType: \"video\",\n            ...e\n        },\n        config: Object.assign({\n            cloud: {\n                cloudName: d\n            }\n        }, o),\n        analytics: Object.assign({\n            sdkCode: Y,\n            sdkSemver: $,\n            techVersion: z,\n            feature: \"\"\n        }, l)\n    });\n}\nvar Q = [], he = \"1.10.4\", Ye = (e)=>{\n    let { autoPlay: o, autoplay: l, className: d, colors: t, controls: r = !0, fontFace: p, height: y, id: C, language: c, languages: i, logo: U = !0, loop: E = !1, muted: P = !1, onDataLoad: n, onError: h, onMetadataLoad: O, onPause: W, onPlay: w, onEnded: D, poster: _, src: u, sourceTypes: M, transformation: x, quality: S = \"auto\", width: k, ...V } = e, F = Array.isArray(x) ? x : [\n        x\n    ], T = u || \"\";\n    if (T.startsWith(\"http\")) try {\n        let s = (0,_cloudinary_util_util__WEBPACK_IMPORTED_MODULE_4__.parseUrl)(u);\n        typeof (s == null ? void 0 : s.publicId) == \"string\" && (T = s == null ? void 0 : s.publicId);\n    } catch (s) {}\n    F.unshift({\n        quality: S\n    });\n    let H = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(), J = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(), j = e.videoRef || J, X = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(), A = e.playerRef || X, a = C || `player-${T.replace(\"/\", \"-\")}`, g = \"cld-video-player cld-fluid\";\n    d && (g = `${g} ${d}`), Q.filter((s)=>s === a).length > 1 ? console.warn(`Multiple instances of the same video detected on the\n     page which may cause some features to not work. \n    Try adding a unique id to each player.`) : Q.push(a);\n    let N = {\n        error: h,\n        loadeddata: n,\n        loadedmetadata: O,\n        pause: W,\n        play: w,\n        ended: D\n    };\n    function Z(s) {\n        let f = N[s.type];\n        typeof f == \"function\" && f(Oe());\n    }\n    b(\"dcdft71qa\");\n    function Ue() {\n        if (\"cloudinary\" in window) {\n            H.current = window.cloudinary;\n            let s = {};\n            typeof U == \"boolean\" ? s.showLogo = U : typeof U == \"object\" && (s = {\n                ...s,\n                showLogo: !0,\n                logoImageUrl: U.imageUrl,\n                logoOnclickUrl: U.onClickUrl\n            });\n            let f = l || o, le = !1, se;\n            o && \"development\" === \"development\" && console.warn('Prop autoPlay will be removed in future versions, please use autoplay (lowercase \"p\")'), (typeof f == \"boolean\" || f === \"true\" || f === \"false\") && (le = f), typeof f == \"string\" && f !== \"true\" && f !== \"false\" && (se = f);\n            let G = {\n                autoplayMode: se,\n                autoplay: le,\n                cloud_name: \"dcdft71qa\",\n                controls: r,\n                fontFace: p || \"\",\n                language: c,\n                languages: i,\n                loop: E,\n                muted: P,\n                publicId: T,\n                transformation: F,\n                ...s,\n                ...V\n            };\n            Array.isArray(M) && (G.sourceTypes = M), typeof t == \"object\" && (G.colors = t), typeof _ == \"string\" ? G.posterOptions = {\n                publicId: _\n            } : typeof _ == \"object\" && (typeof _.src != \"string\" ? G.posterOptions = {\n                publicId: de({\n                    ..._,\n                    src: T,\n                    format: \"auto:image\"\n                })\n            } : G.posterOptions = {\n                publicId: I(_)\n            }), A.current = H.current.videoPlayer(j.current, G), Object.keys(N).forEach((pe)=>{\n                var ce;\n                typeof N[pe] == \"function\" && ((ce = A.current) == null || ce.on(pe, Z));\n            });\n        }\n    }\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>()=>{\n            var s;\n            (s = A.current) == null || s.videojs.cloudinary.dispose(), Q = Q.filter((f)=>f !== a);\n        }, []);\n    function Oe() {\n        return {\n            player: A.current,\n            video: j.current\n        };\n    }\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment, null, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(next_head__WEBPACK_IMPORTED_MODULE_5__, null, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"link\", {\n        href: `https://unpkg.com/cloudinary-video-player@${he}/dist/cld-video-player.min.css`,\n        rel: \"stylesheet\"\n    })), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        style: {\n            width: \"100%\",\n            aspectRatio: `${e.width} / ${e.height}`\n        }\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"video\", {\n        ref: j,\n        id: a,\n        className: g,\n        width: k,\n        height: y\n    }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(next_script__WEBPACK_IMPORTED_MODULE_6__, {\n        id: `cloudinary-videoplayer-${a}-${Math.floor(Math.random() * 100)}`,\n        src: `https://unpkg.com/cloudinary-video-player@${he}/dist/cld-video-player.min.js`,\n        onLoad: Ue,\n        onError: (s)=>console.error(`Failed to load Cloudinary Video Player: ${s.message}`)\n    })));\n}, Ie = Ye;\nfunction $e(e) {\n    return I({\n        ...e,\n        crop: e.crop || \"fill\",\n        format: e.format || \"jpg\",\n        gravity: e.gravity || \"center\",\n        height: e.height || 1254,\n        width: e.width || 2400,\n        widthResize: e.width || 1200\n    });\n}\n //# sourceMappingURL=index.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/next-cloudinary/dist/index.mjs\n");

/***/ })

};
;