"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@cloudinary-util";
exports.ids = ["vendor-chunks/@cloudinary-util"];
exports.modules = {

/***/ "(ssr)/./node_modules/@cloudinary-util/url-loader/dist/chunk-P4VNHLSM.mjs":
/*!**************************************************************************!*\
  !*** ./node_modules/@cloudinary-util/url-loader/dist/chunk-P4VNHLSM.mjs ***!
  \**************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   assetOptionsSchema: () => (/* binding */ assetOptionsSchema),\n/* harmony export */   constructCloudinaryUrl: () => (/* binding */ constructCloudinaryUrl),\n/* harmony export */   constructUrlPropsSchema: () => (/* binding */ constructUrlPropsSchema),\n/* harmony export */   effects: () => (/* binding */ effects),\n/* harmony export */   imageOptionsSchema: () => (/* binding */ imageOptionsSchema),\n/* harmony export */   position: () => (/* binding */ position),\n/* harmony export */   primary: () => (/* binding */ primary),\n/* harmony export */   text: () => (/* binding */ text),\n/* harmony export */   transformationPlugins: () => (/* binding */ transformationPlugins),\n/* harmony export */   videoOptionsSchema: () => (/* binding */ videoOptionsSchema)\n/* harmony export */ });\n/* harmony import */ var zod__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! zod */ \"(ssr)/./node_modules/zod/v3/types.js\");\n/* harmony import */ var _cloudinary_util_util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @cloudinary-util/util */ \"(ssr)/./node_modules/@cloudinary-util/url-loader/node_modules/@cloudinary-util/util/dist/index.mjs\");\n/* harmony import */ var _cloudinary_url_gen__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @cloudinary/url-gen */ \"(ssr)/./node_modules/@cloudinary/url-gen/instance/Cloudinary.js\");\nvar __defProp = Object.defineProperty;\nvar __export = (target, all)=>{\n    for(var name in all)__defProp(target, name, {\n        get: all[name],\n        enumerable: true\n    });\n};\n// src/constants/qualifiers.ts\n\n\n// src/constants/parameters.ts\nvar parameters_exports = {};\n__export(parameters_exports, {\n    angle: ()=>angle,\n    aspectRatio: ()=>aspectRatio,\n    aspectRatioModesEnum: ()=>aspectRatioModesEnum,\n    crop: ()=>crop,\n    cropModesEnum: ()=>cropModesEnum,\n    flags: ()=>flags,\n    flagsEnum: ()=>flagsEnum,\n    gravity: ()=>gravity,\n    height: ()=>height,\n    width: ()=>width,\n    widthResize: ()=>widthResize,\n    x: ()=>x,\n    y: ()=>y,\n    zoom: ()=>zoom\n});\n\nvar angle = {\n    qualifier: \"a\",\n    schema: zod__WEBPACK_IMPORTED_MODULE_0__.union([\n        zod__WEBPACK_IMPORTED_MODULE_0__.string(),\n        zod__WEBPACK_IMPORTED_MODULE_0__.number()\n    ]).describe(JSON.stringify({\n        text: \"Rotates or flips an asset by the specified number of degrees or automatically according to its orientation or available metadata.\",\n        url: \"https://cloudinary.com/documentation/transformation_reference#a_angle\"\n    }))\n};\nvar aspectRatioModesEnum = zod__WEBPACK_IMPORTED_MODULE_0__[\"enum\"]([\n    \"vflip\",\n    \"hflip\",\n    \"ignore\",\n    \"auto_right\",\n    \"auto_left\"\n]);\nvar aspectRatio = {\n    qualifier: \"ar\",\n    schema: zod__WEBPACK_IMPORTED_MODULE_0__.union([\n        zod__WEBPACK_IMPORTED_MODULE_0__.number(),\n        aspectRatioModesEnum,\n        zod__WEBPACK_IMPORTED_MODULE_0__.string()\n    ]).describe(JSON.stringify({\n        text: \"Crops or resizes the asset to a new aspect ratio.\",\n        url: \"https://cloudinary.com/documentation/transformation_reference#ar_aspect_ratio\"\n    }))\n};\nvar cropModesEnum = zod__WEBPACK_IMPORTED_MODULE_0__[\"enum\"]([\n    \"fill\",\n    \"lfill\",\n    \"fill_pad\",\n    \"crop\",\n    \"thumb\",\n    \"scale\",\n    \"fit\",\n    \"limit\",\n    \"mfit\",\n    \"pad\",\n    \"lpad\",\n    \"mpad\",\n    \"imagga_scale\",\n    \"imagga_crop\"\n]);\nvar crop = {\n    qualifier: \"c\",\n    schema: cropModesEnum.describe(JSON.stringify({\n        text: \"Mode to use when cropping an asset.\",\n        url: \"https://cloudinary.com/documentation/transformation_reference#c_crop_resize\"\n    }))\n};\nvar flagsEnum = zod__WEBPACK_IMPORTED_MODULE_0__[\"enum\"]([\n    \"animated\",\n    \"any_format\",\n    \"apng\",\n    \"attachment\",\n    \"awebp\",\n    \"clip\",\n    \"clip_evenodd\",\n    \"cutter\",\n    \"force_icc\",\n    \"force_strip\",\n    \"getinfo\",\n    \"group4\",\n    \"hlsv3\",\n    \"ignore_aspect_ratio\",\n    \"ignore_mask_channels\",\n    \"immutable_cache\",\n    \"keep_attribution\",\n    \"keep_dar\",\n    \"keep_iptc\",\n    \"layer_apply\",\n    \"lossy\",\n    \"mono\",\n    \"no_overflow\",\n    \"no_stream\",\n    \"png8_fl_png24_fl_png32\",\n    \"preserve_transparency\",\n    \"progressive\",\n    \"rasterize\",\n    \"region_relative\",\n    \"relative\",\n    \"replace_image\",\n    \"sanitize\",\n    \"splice\",\n    \"streaming_attachment\",\n    \"strip_profile\",\n    \"text_disallow_overflow\",\n    \"text_no_trim\",\n    \"tiff8_lzw\",\n    \"tiled\",\n    \"truncate_ts\",\n    \"waveform\"\n]);\nvar flags = {\n    qualifier: \"fl\",\n    schema: zod__WEBPACK_IMPORTED_MODULE_0__.union([\n        flagsEnum,\n        zod__WEBPACK_IMPORTED_MODULE_0__.array(flagsEnum)\n    ]).describe(JSON.stringify({\n        text: \"Alters the regular behavior of another transformation or the overall delivery behavior.\",\n        url: \"https://cloudinary.com/documentation/transformation_reference#fl_flag\"\n    }))\n};\nvar gravity = {\n    qualifier: \"g\",\n    schema: zod__WEBPACK_IMPORTED_MODULE_0__.string().describe(JSON.stringify({\n        text: \"Determines which part of an asset to focus on. Note: Default of auto is applied for supported crop modes only.\",\n        url: \"https://cloudinary.com/documentation/transformation_reference#g_gravity\"\n    }))\n};\nvar height = {\n    qualifier: \"h\",\n    schema: zod__WEBPACK_IMPORTED_MODULE_0__.union([\n        zod__WEBPACK_IMPORTED_MODULE_0__.number(),\n        zod__WEBPACK_IMPORTED_MODULE_0__.string()\n    ]).describe(JSON.stringify({\n        text: \"A qualifier that determines the height of a transformed asset or an overlay.\",\n        url: \"https://cloudinary.com/documentation/transformation_reference#h_height\"\n    }))\n};\nvar width = {\n    qualifier: \"w\",\n    schema: zod__WEBPACK_IMPORTED_MODULE_0__.union([\n        zod__WEBPACK_IMPORTED_MODULE_0__.number(),\n        zod__WEBPACK_IMPORTED_MODULE_0__.string()\n    ]).describe(JSON.stringify({\n        text: \"A qualifier that sets the desired width of an asset using a specified value, or automatically based on the available width.\",\n        url: \"https://cloudinary.com/documentation/transformation_reference#w_width\"\n    }))\n};\nvar widthResize = {\n    schema: zod__WEBPACK_IMPORTED_MODULE_0__.union([\n        zod__WEBPACK_IMPORTED_MODULE_0__.string(),\n        zod__WEBPACK_IMPORTED_MODULE_0__.number()\n    ]).describe(JSON.stringify({\n        text: \"Width to resize the asset after all transformations are applied. Useful for responsive resizing.\"\n    }))\n};\nvar x = {\n    qualifier: \"x\",\n    schema: zod__WEBPACK_IMPORTED_MODULE_0__.union([\n        zod__WEBPACK_IMPORTED_MODULE_0__.string(),\n        zod__WEBPACK_IMPORTED_MODULE_0__.number()\n    ]).describe(JSON.stringify({\n        text: \"Adjusts the starting location or offset of the x axis.\",\n        url: \"https://cloudinary.com/documentation/transformation_reference#x_y_coordinates\"\n    }))\n};\nvar y = {\n    qualifier: \"y\",\n    schema: zod__WEBPACK_IMPORTED_MODULE_0__.union([\n        zod__WEBPACK_IMPORTED_MODULE_0__.string(),\n        zod__WEBPACK_IMPORTED_MODULE_0__.number()\n    ]).describe(JSON.stringify({\n        text: \"Adjusts the starting location or offset of the y axis.\",\n        url: \"https://cloudinary.com/documentation/transformation_reference#x_y_coordinates\"\n    }))\n};\nvar zoom = {\n    schema: zod__WEBPACK_IMPORTED_MODULE_0__.string().describe(JSON.stringify({\n        text: \"Controls how close to crop to the detected coordinates when using face-detection, custom-coordinate, or object-specific gravity.\",\n        url: \"https://cloudinary.com/documentation/transformation_reference#z_zoom\"\n    }))\n};\n// src/constants/qualifiers.ts\nvar convertersColors = [\n    {\n        test: _cloudinary_util_util__WEBPACK_IMPORTED_MODULE_1__.testColorIsHex,\n        convert: _cloudinary_util_util__WEBPACK_IMPORTED_MODULE_1__.convertColorHexToRgb\n    }\n];\nvar primary = {\n    aspectRatio,\n    crop,\n    gravity,\n    height,\n    width\n};\nvar position = {\n    angle,\n    gravity,\n    x,\n    y\n};\nvar text = {\n    alignment: {\n        qualifier: false,\n        order: 6\n    },\n    antialias: {\n        qualifier: \"antialias\"\n    },\n    border: {\n        qualifier: \"bo\",\n        location: \"primary\"\n    },\n    color: {\n        qualifier: \"co\",\n        location: \"primary\",\n        converters: convertersColors\n    },\n    fontFamily: {\n        qualifier: false,\n        order: 1\n    },\n    fontSize: {\n        qualifier: false,\n        order: 2\n    },\n    fontStyle: {\n        qualifier: false,\n        order: 4\n    },\n    fontWeight: {\n        qualifier: false,\n        order: 3\n    },\n    hinting: {\n        qualifier: \"hinting\"\n    },\n    letterSpacing: {\n        qualifier: \"letter_spacing\"\n    },\n    lineSpacing: {\n        qualifier: \"line_spacing\"\n    },\n    stroke: {\n        qualifier: \"self\",\n        order: 7\n    },\n    textDecoration: {\n        qualifier: false,\n        order: 5\n    }\n};\nvar effects = {\n    art: {\n        prefix: \"e\",\n        qualifier: \"art\",\n        schema: zod__WEBPACK_IMPORTED_MODULE_0__.string().describe(JSON.stringify({\n            text: \"Applies the selected artistic filter.\",\n            url: \"https://cloudinary.com/documentation/transformation_reference#e_art\"\n        }))\n    },\n    autoBrightness: {\n        prefix: \"e\",\n        qualifier: \"auto_brightness\",\n        schema: zod__WEBPACK_IMPORTED_MODULE_0__.union([\n            zod__WEBPACK_IMPORTED_MODULE_0__.string(),\n            zod__WEBPACK_IMPORTED_MODULE_0__.boolean()\n        ]).describe(JSON.stringify({\n            text: \"Automatically adjusts the image brightness and blends the result with the original image.\",\n            url: \"https://cloudinary.com/documentation/transformation_reference#e_auto_brightness\"\n        }))\n    },\n    autoColor: {\n        prefix: \"e\",\n        qualifier: \"auto_color\",\n        schema: zod__WEBPACK_IMPORTED_MODULE_0__.union([\n            zod__WEBPACK_IMPORTED_MODULE_0__.string(),\n            zod__WEBPACK_IMPORTED_MODULE_0__.boolean()\n        ]).describe(JSON.stringify({\n            text: \"Automatically adjusts the image color balance and blends the result with the original image.\",\n            url: \"https://cloudinary.com/documentation/transformation_reference#e_auto_color\"\n        }))\n    },\n    autoContrast: {\n        prefix: \"e\",\n        qualifier: \"auto_contrast\",\n        schema: zod__WEBPACK_IMPORTED_MODULE_0__.union([\n            zod__WEBPACK_IMPORTED_MODULE_0__.string(),\n            zod__WEBPACK_IMPORTED_MODULE_0__.boolean()\n        ]).describe(JSON.stringify({\n            text: \"Automatically adjusts the image contrast and blends the result with the original image.\",\n            url: \"https://cloudinary.com/documentation/transformation_reference#e_auto_contrast\"\n        }))\n    },\n    assistColorblind: {\n        prefix: \"e\",\n        qualifier: \"assist_colorblind\",\n        schema: zod__WEBPACK_IMPORTED_MODULE_0__.union([\n            zod__WEBPACK_IMPORTED_MODULE_0__.string(),\n            zod__WEBPACK_IMPORTED_MODULE_0__.boolean()\n        ]).describe(JSON.stringify({\n            text: \"Applies stripes or color adjustment to help people with common color blind conditions to differentiate between colors that are similar for them.\",\n            url: \"https://cloudinary.com/documentation/transformation_reference#e_assist_colorblind\"\n        }))\n    },\n    background: {\n        qualifier: \"b\",\n        schema: zod__WEBPACK_IMPORTED_MODULE_0__.string().describe(JSON.stringify({\n            text: \"Applies a background to empty or transparent areas.\",\n            url: \"https://cloudinary.com/documentation/transformation_reference#b_background\"\n        }))\n    },\n    blackwhite: {\n        prefix: \"e\",\n        qualifier: \"blackwhite\",\n        schema: zod__WEBPACK_IMPORTED_MODULE_0__.union([\n            zod__WEBPACK_IMPORTED_MODULE_0__.string(),\n            zod__WEBPACK_IMPORTED_MODULE_0__.boolean()\n        ]).describe(JSON.stringify({\n            text: \"Converts an image to black and white.\",\n            url: \"https://cloudinary.com/documentation/transformation_reference#e_blackwhite\"\n        }))\n    },\n    blur: {\n        prefix: \"e\",\n        qualifier: \"blur\",\n        schema: zod__WEBPACK_IMPORTED_MODULE_0__.union([\n            zod__WEBPACK_IMPORTED_MODULE_0__.string(),\n            zod__WEBPACK_IMPORTED_MODULE_0__.boolean()\n        ]).describe(JSON.stringify({\n            text: \"Applies a blurring filter to an asset.\",\n            url: \"https://cloudinary.com/documentation/transformation_reference#e_blur\"\n        }))\n    },\n    blurFaces: {\n        prefix: \"e\",\n        qualifier: \"blur_faces\",\n        schema: zod__WEBPACK_IMPORTED_MODULE_0__.union([\n            zod__WEBPACK_IMPORTED_MODULE_0__.string(),\n            zod__WEBPACK_IMPORTED_MODULE_0__.boolean()\n        ]).describe(JSON.stringify({\n            text: \"Blurs all detected faces in an image.\",\n            url: \"https://cloudinary.com/documentation/transformation_reference#e_blur_faces\"\n        }))\n    },\n    blurRegion: {\n        prefix: \"e\",\n        qualifier: \"blur_region\",\n        schema: zod__WEBPACK_IMPORTED_MODULE_0__.union([\n            zod__WEBPACK_IMPORTED_MODULE_0__.string(),\n            zod__WEBPACK_IMPORTED_MODULE_0__.boolean()\n        ]).describe(JSON.stringify({\n            text: \"Applies a blurring filter to the region of an image specified by x, y, width and height, or an area of text. If no region is specified, the whole image is blurred.\",\n            url: \"https://cloudinary.com/documentation/transformation_reference#e_blur_region\"\n        }))\n    },\n    border: {\n        qualifier: \"bo\",\n        schema: zod__WEBPACK_IMPORTED_MODULE_0__.string().describe(JSON.stringify({\n            text: \"Adds a solid border around an image or video.\",\n            url: \"https://cloudinary.com/documentation/transformation_reference#bo_border\"\n        }))\n    },\n    brightness: {\n        prefix: \"e\",\n        qualifier: \"brightness\",\n        schema: zod__WEBPACK_IMPORTED_MODULE_0__.union([\n            zod__WEBPACK_IMPORTED_MODULE_0__.string(),\n            zod__WEBPACK_IMPORTED_MODULE_0__.boolean()\n        ]).describe(JSON.stringify({\n            text: \"Adjusts the image or video brightness.\",\n            url: \"https://cloudinary.com/documentation/transformation_reference#e_brightness\"\n        }))\n    },\n    brightnessHSB: {\n        prefix: \"e\",\n        qualifier: \"brightness_hsb\",\n        schema: zod__WEBPACK_IMPORTED_MODULE_0__.union([\n            zod__WEBPACK_IMPORTED_MODULE_0__.string(),\n            zod__WEBPACK_IMPORTED_MODULE_0__.boolean()\n        ]).describe(JSON.stringify({\n            text: \"Adjusts image brightness modulation in HSB to prevent artifacts in some images.\",\n            url: \"https://cloudinary.com/documentation/transformation_reference#e_brightness_hsb\"\n        }))\n    },\n    cartoonify: {\n        prefix: \"e\",\n        qualifier: \"cartoonify\",\n        schema: zod__WEBPACK_IMPORTED_MODULE_0__.union([\n            zod__WEBPACK_IMPORTED_MODULE_0__.string(),\n            zod__WEBPACK_IMPORTED_MODULE_0__.boolean()\n        ]).describe(JSON.stringify({\n            text: \"Applies a cartoon effect to an image.\",\n            url: \"https://cloudinary.com/documentation/transformation_reference#e_cartoonify\"\n        }))\n    },\n    color: {\n        qualifier: \"co\",\n        schema: zod__WEBPACK_IMPORTED_MODULE_0__.string().describe(JSON.stringify({\n            text: \"A qualifier that specifies the color to use with the corresponding transformation.\",\n            url: \"https://cloudinary.com/documentation/transformation_reference#co_color\"\n        })),\n        converters: convertersColors\n    },\n    colorize: {\n        prefix: \"e\",\n        qualifier: \"colorize\",\n        schema: zod__WEBPACK_IMPORTED_MODULE_0__.string().describe(JSON.stringify({\n            text: \"Colorizes an image. By default, gray is used for colorization. You can specify a different color using the color qualifier.\",\n            url: \"https://cloudinary.com/documentation/transformation_reference#e_colorize\"\n        }))\n    },\n    contrast: {\n        prefix: \"e\",\n        qualifier: \"contrast\",\n        schema: zod__WEBPACK_IMPORTED_MODULE_0__.union([\n            zod__WEBPACK_IMPORTED_MODULE_0__.string(),\n            zod__WEBPACK_IMPORTED_MODULE_0__.boolean()\n        ]).describe(JSON.stringify({\n            text: \"Adjusts an image or video contrast.\",\n            url: \"https://cloudinary.com/documentation/transformation_reference#e_contrast\"\n        }))\n    },\n    displace: {\n        prefix: \"e\",\n        qualifier: \"distort\",\n        schema: zod__WEBPACK_IMPORTED_MODULE_0__.string().describe(JSON.stringify({\n            text: \"Displaces the pixels in an image according to the color channels of the pixels in another specified image (a gradient map specified with the overlay parameter).\",\n            url: \"https://cloudinary.com/documentation/transformation_reference#e_displace\"\n        }))\n    },\n    distort: {\n        prefix: \"e\",\n        qualifier: \"distort\",\n        schema: zod__WEBPACK_IMPORTED_MODULE_0__.string().describe(JSON.stringify({\n            text: \"Distorts an image to a new shape by either adjusting its corners or by warping it into an arc.\",\n            url: \"https://cloudinary.com/documentation/transformation_reference#e_distort\"\n        }))\n    },\n    fillLight: {\n        prefix: \"e\",\n        qualifier: \"fill_light\",\n        schema: zod__WEBPACK_IMPORTED_MODULE_0__.union([\n            zod__WEBPACK_IMPORTED_MODULE_0__.string(),\n            zod__WEBPACK_IMPORTED_MODULE_0__.boolean()\n        ]).describe(JSON.stringify({\n            text: \"Adjusts the fill light and optionally blends the result with the original image.\",\n            url: \"https://cloudinary.com/documentation/transformation_reference#e_fill_light\"\n        }))\n    },\n    gamma: {\n        prefix: \"e\",\n        qualifier: \"gamma\",\n        schema: zod__WEBPACK_IMPORTED_MODULE_0__.union([\n            zod__WEBPACK_IMPORTED_MODULE_0__.string(),\n            zod__WEBPACK_IMPORTED_MODULE_0__.boolean()\n        ]).describe(JSON.stringify({\n            text: \"Adjusts the image or video gamma level.\",\n            url: \"https://cloudinary.com/documentation/transformation_reference#e_gamma\"\n        }))\n    },\n    gradientFade: {\n        prefix: \"e\",\n        qualifier: \"gradient_fade\",\n        schema: zod__WEBPACK_IMPORTED_MODULE_0__.union([\n            zod__WEBPACK_IMPORTED_MODULE_0__.string(),\n            zod__WEBPACK_IMPORTED_MODULE_0__.boolean()\n        ]).describe(JSON.stringify({\n            text: \"Applies a gradient fade effect from the edge of an image.\",\n            url: \"https://cloudinary.com/documentation/transformation_reference#e_gradient_fade\"\n        }))\n    },\n    grayscale: {\n        prefix: \"e\",\n        qualifier: \"grayscale\",\n        schema: zod__WEBPACK_IMPORTED_MODULE_0__.boolean().describe(JSON.stringify({\n            text: \"Converts an image to grayscale (multiple shades of gray).\",\n            url: \"https://cloudinary.com/documentation/transformation_reference#e_grayscale\"\n        }))\n    },\n    hue: {\n        prefix: \"e\",\n        qualifier: \"hue\",\n        schema: zod__WEBPACK_IMPORTED_MODULE_0__.union([\n            zod__WEBPACK_IMPORTED_MODULE_0__.string(),\n            zod__WEBPACK_IMPORTED_MODULE_0__.boolean()\n        ]).describe(JSON.stringify({\n            text: \"Adjusts an image's hue.\",\n            url: \"https://cloudinary.com/documentation/transformation_reference#e_hue\"\n        }))\n    },\n    improve: {\n        prefix: \"e\",\n        qualifier: \"improve\",\n        schema: zod__WEBPACK_IMPORTED_MODULE_0__.union([\n            zod__WEBPACK_IMPORTED_MODULE_0__.string(),\n            zod__WEBPACK_IMPORTED_MODULE_0__.boolean()\n        ]).describe(JSON.stringify({\n            text: \"Adjusts an image's colors, contrast and brightness to improve its appearance.\",\n            url: \"https://cloudinary.com/documentation/transformation_reference#e_improve\"\n        }))\n    },\n    multiply: {\n        prefix: \"e\",\n        qualifier: \"multiply\",\n        schema: zod__WEBPACK_IMPORTED_MODULE_0__.boolean().describe(JSON.stringify({\n            text: \"A qualifier that blends image layers using the multiply blend mode\",\n            url: \"https://cloudinary.com/documentation/transformation_reference#e_multiply\"\n        }))\n    },\n    negate: {\n        prefix: \"e\",\n        qualifier: \"negate\",\n        schema: zod__WEBPACK_IMPORTED_MODULE_0__.union([\n            zod__WEBPACK_IMPORTED_MODULE_0__.string(),\n            zod__WEBPACK_IMPORTED_MODULE_0__.boolean()\n        ]).describe(JSON.stringify({\n            text: \"https://cloudinary.com/documentation/transformation_reference#e_negate\",\n            url: \"https://cloudinary.com/documentation/transformation_reference#e_negate\"\n        }))\n    },\n    noise: {\n        prefix: \"e\",\n        qualifier: \"noise\",\n        schema: zod__WEBPACK_IMPORTED_MODULE_0__.boolean().describe(JSON.stringify({\n            text: \"https://cloudinary.com/documentation/transformation_reference#e_noise\",\n            url: \"https://cloudinary.com/documentation/transformation_reference#e_noise\"\n        }))\n    },\n    oilPaint: {\n        prefix: \"e\",\n        qualifier: \"oil_paint\",\n        schema: zod__WEBPACK_IMPORTED_MODULE_0__.union([\n            zod__WEBPACK_IMPORTED_MODULE_0__.string(),\n            zod__WEBPACK_IMPORTED_MODULE_0__.boolean()\n        ]).describe(JSON.stringify({\n            text: \"https://cloudinary.com/documentation/transformation_reference#e_oil_paint\",\n            url: \"https://cloudinary.com/documentation/transformation_reference#e_oil_paint\"\n        }))\n    },\n    opacity: {\n        qualifier: \"o\",\n        schema: zod__WEBPACK_IMPORTED_MODULE_0__.union([\n            zod__WEBPACK_IMPORTED_MODULE_0__.string(),\n            zod__WEBPACK_IMPORTED_MODULE_0__.number()\n        ]).describe(JSON.stringify({\n            text: \"Adjusts the opacity of an asset and makes it semi-transparent.\",\n            url: \"https://cloudinary.com/documentation/transformation_reference#o_opacity\"\n        }))\n    },\n    outline: {\n        prefix: \"e\",\n        qualifier: \"outline\",\n        schema: zod__WEBPACK_IMPORTED_MODULE_0__.union([\n            zod__WEBPACK_IMPORTED_MODULE_0__.string(),\n            zod__WEBPACK_IMPORTED_MODULE_0__.boolean()\n        ]).describe(JSON.stringify({\n            text: \"Adds an outline effect to an image.\",\n            url: \"https://cloudinary.com/documentation/transformation_reference#e_outline\"\n        }))\n    },\n    pixelate: {\n        prefix: \"e\",\n        qualifier: \"pixelate\",\n        schema: zod__WEBPACK_IMPORTED_MODULE_0__.union([\n            zod__WEBPACK_IMPORTED_MODULE_0__.string(),\n            zod__WEBPACK_IMPORTED_MODULE_0__.boolean()\n        ]).describe(JSON.stringify({\n            text: \"Applies a pixelation effect.\",\n            url: \"https://cloudinary.com/documentation/transformation_reference#e_pixelate\"\n        }))\n    },\n    pixelateFaces: {\n        prefix: \"e\",\n        qualifier: \"pixelate_faces\",\n        schema: zod__WEBPACK_IMPORTED_MODULE_0__.union([\n            zod__WEBPACK_IMPORTED_MODULE_0__.string(),\n            zod__WEBPACK_IMPORTED_MODULE_0__.boolean()\n        ]).describe(JSON.stringify({\n            text: \"Pixelates all detected faces in an image.\",\n            url: \"https://cloudinary.com/documentation/transformation_reference#e_pixelate_faces\"\n        }))\n    },\n    pixelateRegion: {\n        prefix: \"e\",\n        qualifier: \"pixelate_region\",\n        schema: zod__WEBPACK_IMPORTED_MODULE_0__.union([\n            zod__WEBPACK_IMPORTED_MODULE_0__.string(),\n            zod__WEBPACK_IMPORTED_MODULE_0__.boolean()\n        ]).describe(JSON.stringify({\n            text: \"Pixelates the region of an image specified by x, y, width and height, or an area of text.\",\n            url: \"https://cloudinary.com/documentation/transformation_reference#e_pixelate_region\"\n        }))\n    },\n    radius: {\n        qualifier: \"r\",\n        schema: zod__WEBPACK_IMPORTED_MODULE_0__.string().describe(JSON.stringify({\n            text: \"Rounds the corners of an image or video.\",\n            url: \"https://cloudinary.com/documentation/transformation_reference#r_round_corners\"\n        }))\n    },\n    redeye: {\n        prefix: \"e\",\n        qualifier: \"redeye\",\n        schema: zod__WEBPACK_IMPORTED_MODULE_0__.union([\n            zod__WEBPACK_IMPORTED_MODULE_0__.string(),\n            zod__WEBPACK_IMPORTED_MODULE_0__.boolean()\n        ]).describe(JSON.stringify({\n            text: \"Automatically removes red eyes in an image.\",\n            url: \"https://cloudinary.com/documentation/transformation_reference#e_redeye\"\n        }))\n    },\n    replaceColor: {\n        prefix: \"e\",\n        qualifier: \"replace_color\",\n        schema: zod__WEBPACK_IMPORTED_MODULE_0__.string().describe(JSON.stringify({\n            text: \"Maps an input color and those similar to the input color to corresponding shades of a specified output color.\",\n            url: \"https://cloudinary.com/documentation/transformation_reference#e_replace_color\"\n        }))\n    },\n    saturation: {\n        prefix: \"e\",\n        qualifier: \"saturation\",\n        schema: zod__WEBPACK_IMPORTED_MODULE_0__.union([\n            zod__WEBPACK_IMPORTED_MODULE_0__.string(),\n            zod__WEBPACK_IMPORTED_MODULE_0__.boolean()\n        ]).describe(JSON.stringify({\n            text: \"Adjusts an image or video saturation level.\",\n            url: \"https://cloudinary.com/documentation/transformation_reference#e_saturation\"\n        }))\n    },\n    screen: {\n        prefix: \"e\",\n        qualifier: \"screen\",\n        schema: zod__WEBPACK_IMPORTED_MODULE_0__.boolean().describe(JSON.stringify({\n            text: \"A qualifier that blends image layers using the screen blend mode.\",\n            url: \"https://cloudinary.com/documentation/transformation_reference#e_screen\"\n        }))\n    },\n    sepia: {\n        prefix: \"e\",\n        qualifier: \"sepia\",\n        schema: zod__WEBPACK_IMPORTED_MODULE_0__.union([\n            zod__WEBPACK_IMPORTED_MODULE_0__.string(),\n            zod__WEBPACK_IMPORTED_MODULE_0__.boolean()\n        ]).describe(JSON.stringify({\n            text: \"Changes the color scheme of an image to sepia.\",\n            url: \"https://cloudinary.com/documentation/transformation_reference#e_sepia\"\n        }))\n    },\n    shadow: {\n        prefix: \"e\",\n        qualifier: \"shadow\",\n        schema: zod__WEBPACK_IMPORTED_MODULE_0__.union([\n            zod__WEBPACK_IMPORTED_MODULE_0__.string(),\n            zod__WEBPACK_IMPORTED_MODULE_0__.boolean()\n        ]).describe(JSON.stringify({\n            text: \"Adds a gray shadow to the bottom right of an image.\",\n            url: \"https://cloudinary.com/documentation/transformation_reference#e_shadow\"\n        }))\n    },\n    sharpen: {\n        prefix: \"e\",\n        qualifier: \"sharpen\",\n        schema: zod__WEBPACK_IMPORTED_MODULE_0__.union([\n            zod__WEBPACK_IMPORTED_MODULE_0__.string(),\n            zod__WEBPACK_IMPORTED_MODULE_0__.boolean()\n        ]).describe(JSON.stringify({\n            text: \"Applies a sharpening filter.\",\n            url: \"https://cloudinary.com/documentation/transformation_reference#e_sharpen\"\n        }))\n    },\n    shear: {\n        prefix: \"e\",\n        qualifier: \"shear\",\n        schema: zod__WEBPACK_IMPORTED_MODULE_0__.string().describe(JSON.stringify({\n            text: \"Skews an image according to the two specified values in degrees.\",\n            url: \"https://cloudinary.com/documentation/transformation_reference#e_shear\"\n        }))\n    },\n    simulateColorblind: {\n        prefix: \"e\",\n        qualifier: \"simulate_colorblind\",\n        schema: zod__WEBPACK_IMPORTED_MODULE_0__.union([\n            zod__WEBPACK_IMPORTED_MODULE_0__.string(),\n            zod__WEBPACK_IMPORTED_MODULE_0__.boolean()\n        ]).describe(JSON.stringify({\n            text: \"Simulates the way an image would appear to someone with the specified color blind condition.\",\n            url: \"https://cloudinary.com/documentation/transformation_reference#e_simulate_colorblind\"\n        }))\n    },\n    tint: {\n        prefix: \"e\",\n        qualifier: \"tint\",\n        schema: zod__WEBPACK_IMPORTED_MODULE_0__.union([\n            zod__WEBPACK_IMPORTED_MODULE_0__.string(),\n            zod__WEBPACK_IMPORTED_MODULE_0__.boolean()\n        ]).describe(JSON.stringify({\n            text: \"Blends an image with one or more tint colors at a specified intensity.\",\n            url: \"https://cloudinary.com/documentation/transformation_reference#e_tint\"\n        }))\n    },\n    trim: {\n        prefix: \"e\",\n        qualifier: \"trim\",\n        schema: zod__WEBPACK_IMPORTED_MODULE_0__.union([\n            zod__WEBPACK_IMPORTED_MODULE_0__.string(),\n            zod__WEBPACK_IMPORTED_MODULE_0__.boolean()\n        ]).describe(JSON.stringify({\n            text: \"Detects and removes image edges whose color is similar to the corner pixels.\",\n            url: \"https://cloudinary.com/documentation/transformation_reference#e_trim\"\n        }))\n    },\n    unsharpMask: {\n        prefix: \"e\",\n        qualifier: \"unsharp_mask\",\n        schema: zod__WEBPACK_IMPORTED_MODULE_0__.union([\n            zod__WEBPACK_IMPORTED_MODULE_0__.string(),\n            zod__WEBPACK_IMPORTED_MODULE_0__.boolean()\n        ]).describe(JSON.stringify({\n            text: \"Applies an unsharp mask filter to an image.\",\n            url: \"https://cloudinary.com/documentation/transformation_reference#e_unsharp_mask\"\n        }))\n    },\n    vectorize: {\n        prefix: \"e\",\n        qualifier: \"vectorize\",\n        schema: zod__WEBPACK_IMPORTED_MODULE_0__.union([\n            zod__WEBPACK_IMPORTED_MODULE_0__.string(),\n            zod__WEBPACK_IMPORTED_MODULE_0__.boolean()\n        ]).describe(JSON.stringify({\n            text: \"Vectorizes an image.\",\n            url: \"https://cloudinary.com/documentation/transformation_reference#e_vectorize\"\n        }))\n    },\n    vibrance: {\n        prefix: \"e\",\n        qualifier: \"vibrance\",\n        schema: zod__WEBPACK_IMPORTED_MODULE_0__.union([\n            zod__WEBPACK_IMPORTED_MODULE_0__.string(),\n            zod__WEBPACK_IMPORTED_MODULE_0__.boolean()\n        ]).describe(JSON.stringify({\n            text: \"Applies a vibrance filter to an image.\",\n            url: \"https://cloudinary.com/documentation/transformation_reference#e_vibrance\"\n        }))\n    },\n    vignette: {\n        prefix: \"e\",\n        qualifier: \"vignette\",\n        schema: zod__WEBPACK_IMPORTED_MODULE_0__.union([\n            zod__WEBPACK_IMPORTED_MODULE_0__.string(),\n            zod__WEBPACK_IMPORTED_MODULE_0__.boolean()\n        ]).describe(JSON.stringify({\n            text: \"Applies a vignette effect to an image.\",\n            url: \"https://cloudinary.com/documentation/transformation_reference#e_vignette\"\n        }))\n    }\n};\n// src/types/asset.ts\n\n// src/plugins/cropping.ts\nvar cropping_exports = {};\n__export(cropping_exports, {\n    assetTypes: ()=>assetTypes,\n    normalizeNumberParameter: ()=>normalizeNumberParameter,\n    plugin: ()=>plugin,\n    props: ()=>props\n});\nvar cropsAspectRatio = [\n    \"crop\",\n    \"fill\",\n    \"lfill\",\n    \"fill_pad\",\n    \"thumb\"\n];\nvar cropsGravityAuto = [\n    \"crop\",\n    \"fill\",\n    \"lfill\",\n    \"fill_pad\",\n    \"thumb\"\n];\nvar cropsWithZoom = [\n    \"crop\",\n    \"thumb\"\n];\nvar DEFAULT_CROP = \"limit\";\nvar props = {\n    aspectRatio: aspectRatio.schema.optional(),\n    crop: crop.schema.default(DEFAULT_CROP).optional(),\n    gravity: gravity.schema.optional(),\n    widthResize: widthResize.schema.optional(),\n    zoom: zoom.schema.optional()\n};\nvar assetTypes = [\n    \"image\",\n    \"images\",\n    \"video\",\n    \"videos\"\n];\nfunction normalizeNumberParameter(param) {\n    if (typeof param !== \"string\") return param;\n    return parseInt(param);\n}\nfunction plugin(props20) {\n    const { cldAsset, options } = props20;\n    const { aspectRatio: aspectRatio2, width: defaultWidth, height: defaultHeight, widthResize: defaultWidthResize, // Default the crop to \"limit\" to avoid upscaling, even when widthResize is passed in.\n    // This avoid further distorting the image since the browser will resize in that case.\n    // If caller wants actual resize, can explicitly pass in \"scale\".\n    crop: crop2 = DEFAULT_CROP } = options;\n    const overrides = {\n        width: void 0\n    };\n    let height2 = normalizeNumberParameter(defaultHeight);\n    let width2 = normalizeNumberParameter(defaultWidth);\n    let widthResize2 = normalizeNumberParameter(defaultWidthResize);\n    const hasDefinedDimensions = height2 || width2;\n    const hasValidAspectRatio = aspectRatio2 && cropsAspectRatio.includes(crop2);\n    let transformationString = \"\";\n    if (crop2 && (hasDefinedDimensions || hasValidAspectRatio)) {\n        transformationString = `c_${crop2}`;\n    }\n    if (hasValidAspectRatio) {\n        transformationString = `${transformationString},ar_${aspectRatio2}`;\n    }\n    if (width2) {\n        transformationString = `${transformationString},w_${width2}`;\n    }\n    if (!options.gravity && cropsGravityAuto.includes(crop2)) {\n        options.gravity = \"auto\";\n    }\n    if (![\n        \"limit\"\n    ].includes(crop2) && typeof height2 === \"number\") {\n        transformationString = `${transformationString},h_${height2}`;\n    }\n    if (options.gravity) {\n        if (options.gravity === \"auto\" && !cropsGravityAuto.includes(crop2)) {\n            console.warn(`Auto gravity can only be used with crop modes: ${cropsGravityAuto.join(\", \")}. Not applying gravity.`);\n        } else {\n            transformationString = `${transformationString},g_${options.gravity}`;\n        }\n    }\n    if (options.zoom) {\n        if (options.zoom === \"auto\" && !cropsWithZoom.includes(crop2)) {\n            console.warn(`Zoom can only be used with crop modes: ${cropsWithZoom.join(\", \")}. Not applying zoom.`);\n        } else {\n            transformationString = `${transformationString},z_${options.zoom}`;\n        }\n    }\n    cldAsset.effect(transformationString);\n    if (widthResize2) {\n        overrides.width = widthResize2;\n    }\n    return {\n        options: overrides\n    };\n}\n// src/plugins/effects.ts\nvar effects_exports = {};\n__export(effects_exports, {\n    assetTypes: ()=>assetTypes2,\n    plugin: ()=>plugin2,\n    props: ()=>props2\n});\n\n// src/lib/transformations.ts\nfunction constructTransformation({ prefix, qualifier, value, converters }) {\n    let transformation = \"\";\n    if (prefix) {\n        transformation = `${prefix}_`;\n    }\n    let transformationValue = value;\n    converters?.forEach(({ test, convert })=>{\n        if (!test(transformationValue)) return;\n        transformationValue = convert(transformationValue);\n    });\n    if (transformationValue === true || transformationValue === \"true\") {\n        return `${transformation}${qualifier}`;\n    }\n    if (typeof transformationValue === \"string\" || typeof transformationValue === \"number\") {\n        if (prefix) {\n            return `${transformation}${qualifier}:${transformationValue}`;\n        } else {\n            return `${qualifier}_${transformationValue}`;\n        }\n    }\n}\nfunction promptArrayToString(promptArray) {\n    return `(${promptArray.join(\";\")})`;\n}\n// src/plugins/effects.ts\nvar effectProps = {\n    art: effects.art.schema.optional(),\n    autoBrightness: effects.autoBrightness.schema.optional(),\n    autoColor: effects.autoColor.schema.optional(),\n    autoContrast: effects.autoContrast.schema.optional(),\n    assistColorblind: effects.assistColorblind.schema.optional(),\n    background: effects.background.schema.optional(),\n    blackwhite: effects.blackwhite.schema.optional(),\n    blur: effects.blur.schema.optional(),\n    blurFaces: effects.blurFaces.schema.optional(),\n    blurRegion: effects.blurRegion.schema.optional(),\n    border: effects.border.schema.optional(),\n    brightness: effects.brightness.schema.optional(),\n    brightnessHSB: effects.brightnessHSB.schema.optional(),\n    cartoonify: effects.cartoonify.schema.optional(),\n    color: effects.color.schema.optional(),\n    colorize: effects.colorize.schema.optional(),\n    contrast: effects.contrast.schema.optional(),\n    distort: effects.distort.schema.optional(),\n    fillLight: effects.fillLight.schema.optional(),\n    gamma: effects.gamma.schema.optional(),\n    gradientFade: effects.gradientFade.schema.optional(),\n    grayscale: effects.grayscale.schema.optional(),\n    improve: effects.improve.schema.optional(),\n    multiply: effects.multiply.schema.optional(),\n    negate: effects.negate.schema.optional(),\n    oilPaint: effects.oilPaint.schema.optional(),\n    opacity: effects.opacity.schema.optional(),\n    outline: effects.outline.schema.optional(),\n    pixelate: effects.pixelate.schema.optional(),\n    pixelateFaces: effects.pixelateFaces.schema.optional(),\n    pixelateRegion: effects.pixelateRegion.schema.optional(),\n    radius: effects.radius.schema.optional(),\n    redeye: effects.redeye.schema.optional(),\n    replaceColor: effects.replaceColor.schema.optional(),\n    saturation: effects.saturation.schema.optional(),\n    screen: effects.screen.schema.optional(),\n    sepia: effects.sepia.schema.optional(),\n    shadow: effects.shadow.schema.optional(),\n    sharpen: effects.sharpen.schema.optional(),\n    shear: effects.shear.schema.optional(),\n    simulateColorblind: effects.simulateColorblind.schema.optional(),\n    tint: effects.tint.schema.optional(),\n    trim: effects.trim.schema.optional(),\n    unsharpMask: effects.unsharpMask.schema.optional(),\n    vectorize: effects.vectorize.schema.optional(),\n    vibrance: effects.vibrance.schema.optional(),\n    vignette: effects.vignette.schema.optional()\n};\nvar props2 = {\n    effects: zod__WEBPACK_IMPORTED_MODULE_0__.array(zod__WEBPACK_IMPORTED_MODULE_0__.object(effectProps)).describe(JSON.stringify({\n        text: \"Array of objects specifying transformations to be applied to asset.\"\n    })).optional(),\n    ...effectProps\n};\nvar assetTypes2 = [\n    \"image\",\n    \"images\",\n    \"video\",\n    \"videos\"\n];\nfunction plugin2(props20) {\n    const { cldAsset, options } = props20;\n    const transformationStrings = constructTransformationString({\n        effects,\n        options\n    });\n    transformationStrings.filter((t)=>!!t).forEach((transformation)=>cldAsset.effect(transformation));\n    ;\n    if (Array.isArray(options?.effects)) {\n        options?.effects.forEach((effectsSet)=>{\n            const transformationString = constructTransformationString({\n                effects,\n                options: effectsSet\n            }).filter((t)=>!!t).join(\",\");\n            cldAsset.effect(transformationString);\n        });\n    }\n    function constructTransformationString({ effects: effects2, options: options2 }) {\n        return Object.keys(effects2).map((key)=>{\n            const { prefix, qualifier, converters } = effects2[key];\n            return constructTransformation({\n                qualifier,\n                prefix,\n                value: options2?.[key],\n                converters\n            });\n        });\n    }\n    return {};\n}\n// src/plugins/flags.ts\nvar flags_exports = {};\n__export(flags_exports, {\n    assetTypes: ()=>assetTypes3,\n    plugin: ()=>plugin3,\n    props: ()=>props3\n});\nvar { flagsEnum: flagsEnum2 } = parameters_exports;\nvar props3 = {\n    flags: flags.schema.optional()\n};\nvar assetTypes3 = [\n    \"image\",\n    \"images\",\n    \"video\",\n    \"videos\"\n];\nfunction plugin3(props20) {\n    const { cldAsset, options } = props20;\n    const { flags: flags2 = [] } = options;\n    if (Array.isArray(flags2) && flags2.length > 0) {\n        flags2.forEach((flag)=>{\n            const { success } = flagsEnum2.safeParse(flag);\n            if (!success) {\n                if (true) {\n                    console.warn(`Invalid flag ${flag}, not applying.`);\n                }\n                return;\n            }\n            cldAsset.addFlag(flag);\n        });\n    } else if (typeof flags2 === \"object\") {\n        Object.entries(flags2).forEach(([qualifier, value])=>{\n            const { success } = flagsEnum2.safeParse(qualifier);\n            if (!success) {\n                if (true) {\n                    console.warn(`Invalid flag ${qualifier}, not applying.`);\n                }\n                return;\n            }\n            cldAsset.addTransformation(`fl_${qualifier}:${value}`);\n        });\n    }\n    return {};\n}\n// src/plugins/named-transformations.ts\nvar named_transformations_exports = {};\n__export(named_transformations_exports, {\n    assetTypes: ()=>assetTypes4,\n    plugin: ()=>plugin4,\n    props: ()=>props4,\n    strict: ()=>strict\n});\n\nvar NamedTransformationSchema = zod__WEBPACK_IMPORTED_MODULE_0__.string();\nvar props4 = {\n    namedTransformations: zod__WEBPACK_IMPORTED_MODULE_0__.union([\n        NamedTransformationSchema,\n        zod__WEBPACK_IMPORTED_MODULE_0__.array(NamedTransformationSchema)\n    ]).describe(JSON.stringify({\n        text: \"Named transformations to apply to asset.\",\n        url: \"https://cloudinary.com/documentation/image_transformations#named_transformations\"\n    })).optional(),\n    /**\n   * @deprecated use {@link `namedTransformations`} instead\n   */ transformations: zod__WEBPACK_IMPORTED_MODULE_0__.union([\n        NamedTransformationSchema,\n        zod__WEBPACK_IMPORTED_MODULE_0__.array(NamedTransformationSchema)\n    ]).describe(JSON.stringify({\n        text: \"Deprecated: use namedTransformations instead\",\n        url: \"https://cloudinary.com/documentation/image_transformations#named_transformations\"\n    })).optional()\n};\nvar assetTypes4 = [\n    \"image\",\n    \"images\",\n    \"video\",\n    \"videos\"\n];\nvar strict = true;\nfunction plugin4(props20) {\n    const { cldAsset, options } = props20;\n    const { transformations, namedTransformations } = options;\n    if (transformations && process.env.NODE_ENVIRONMENT === \"development\") {\n        console.warn(\"The transformations prop is deprecated. Please use namedTransformations instead.\");\n    }\n    let _namedTransformations = namedTransformations || transformations || [];\n    if (!Array.isArray(_namedTransformations)) {\n        _namedTransformations = [\n            _namedTransformations\n        ];\n    }\n    _namedTransformations.forEach((transformation)=>{\n        cldAsset.addTransformation(`t_${transformation}`);\n    });\n    return {};\n}\n// src/plugins/overlays.ts\nvar overlays_exports = {};\n__export(overlays_exports, {\n    DEFAULT_TEXT_OPTIONS: ()=>DEFAULT_TEXT_OPTIONS,\n    assetTypes: ()=>assetTypes5,\n    plugin: ()=>plugin5,\n    props: ()=>props5\n});\n\n\nvar overlayTextSchema = zod__WEBPACK_IMPORTED_MODULE_0__.object({\n    alignment: zod__WEBPACK_IMPORTED_MODULE_0__.string().optional(),\n    antialias: zod__WEBPACK_IMPORTED_MODULE_0__.string().optional(),\n    border: zod__WEBPACK_IMPORTED_MODULE_0__.string().optional(),\n    color: zod__WEBPACK_IMPORTED_MODULE_0__.string().optional(),\n    fontFamily: zod__WEBPACK_IMPORTED_MODULE_0__.string().optional(),\n    fontSize: zod__WEBPACK_IMPORTED_MODULE_0__.number().optional(),\n    fontStyle: zod__WEBPACK_IMPORTED_MODULE_0__.union([\n        zod__WEBPACK_IMPORTED_MODULE_0__.string(),\n        zod__WEBPACK_IMPORTED_MODULE_0__.number()\n    ]).optional(),\n    fontWeight: zod__WEBPACK_IMPORTED_MODULE_0__.string().optional(),\n    hinting: zod__WEBPACK_IMPORTED_MODULE_0__.union([\n        zod__WEBPACK_IMPORTED_MODULE_0__.string(),\n        zod__WEBPACK_IMPORTED_MODULE_0__.number()\n    ]).optional(),\n    letterSpacing: zod__WEBPACK_IMPORTED_MODULE_0__.union([\n        zod__WEBPACK_IMPORTED_MODULE_0__.string(),\n        zod__WEBPACK_IMPORTED_MODULE_0__.number()\n    ]).optional(),\n    lineSpacing: zod__WEBPACK_IMPORTED_MODULE_0__.union([\n        zod__WEBPACK_IMPORTED_MODULE_0__.string(),\n        zod__WEBPACK_IMPORTED_MODULE_0__.number()\n    ]).optional(),\n    stroke: zod__WEBPACK_IMPORTED_MODULE_0__.string().optional(),\n    text: zod__WEBPACK_IMPORTED_MODULE_0__.string()\n});\nvar overlayPositionSchema = zod__WEBPACK_IMPORTED_MODULE_0__.object({\n    angle: angle.schema.optional(),\n    gravity: gravity.schema.optional(),\n    x: x.schema.optional(),\n    y: y.schema.optional()\n});\nvar overlaySchema = zod__WEBPACK_IMPORTED_MODULE_0__.object({\n    appliedEffects: zod__WEBPACK_IMPORTED_MODULE_0__.array(zod__WEBPACK_IMPORTED_MODULE_0__.object({})).optional(),\n    appliedFlags: flags.schema.optional(),\n    effects: zod__WEBPACK_IMPORTED_MODULE_0__.array(zod__WEBPACK_IMPORTED_MODULE_0__.object({})).optional(),\n    crop: crop.schema.optional(),\n    flags: flags.schema.optional(),\n    height: height.schema.optional(),\n    position: overlayPositionSchema.optional(),\n    publicId: zod__WEBPACK_IMPORTED_MODULE_0__.string().optional(),\n    text: zod__WEBPACK_IMPORTED_MODULE_0__.union([\n        zod__WEBPACK_IMPORTED_MODULE_0__.string(),\n        overlayTextSchema\n    ]).optional(),\n    url: zod__WEBPACK_IMPORTED_MODULE_0__.string().optional(),\n    width: width.schema.optional()\n});\nvar props5 = {\n    overlay: overlaySchema.describe(JSON.stringify({\n        text: \"Image or text layer that is applied on top of the base image.\",\n        url: \"https://cloudinary.com/documentation/transformation_reference#l_layer\"\n    })).optional(),\n    overlays: zod__WEBPACK_IMPORTED_MODULE_0__.array(overlaySchema).describe(JSON.stringify({\n        text: \"Image or text layers that are applied on top of the base image.\",\n        url: \"https://cloudinary.com/documentation/transformation_reference#l_layer\"\n    })).optional(),\n    text: zod__WEBPACK_IMPORTED_MODULE_0__.string().describe(JSON.stringify({\n        text: \"Text to be overlaid on asset.\",\n        url: \"https://cloudinary.com/documentation/image_transformations#transformation_url_structure\"\n    })).optional()\n};\nvar assetTypes5 = [\n    \"image\",\n    \"images\",\n    \"video\",\n    \"videos\"\n];\nvar DEFAULT_TEXT_OPTIONS = {\n    color: \"black\",\n    fontFamily: \"Arial\",\n    fontSize: 200,\n    fontWeight: \"bold\"\n};\nfunction plugin5(props20) {\n    const { cldAsset, options } = props20;\n    const { text: text2, overlays = [] } = options;\n    const type = \"overlay\";\n    const typeQualifier = \"l\";\n    if (Array.isArray(overlays)) {\n        overlays.forEach(applyOverlay);\n    }\n    if (typeof text2 === \"string\") {\n        applyOverlay({\n            text: Object.assign({}, DEFAULT_TEXT_OPTIONS, {\n                text: text2\n            })\n        });\n    } else if (typeof text2 === \"object\") {\n        applyOverlay({\n            text: Object.assign({}, DEFAULT_TEXT_OPTIONS, text2)\n        });\n    }\n    function applyOverlay({ publicId, url, position: position2, text: text3, effects: layerEffects = [], appliedEffects = [], flags: layerFlags = [], appliedFlags = [], ...options2 }) {\n        const hasPublicId = typeof publicId === \"string\";\n        const hasUrl = typeof url === \"string\";\n        const hasText = typeof text3 === \"object\" || typeof text3 === \"string\";\n        const hasPosition = typeof position2 === \"object\";\n        if (!hasPublicId && !hasUrl && !hasText) {\n            console.warn(`An ${type} is missing Public ID, URL, or Text`);\n            return;\n        }\n        let layerTransformation;\n        if (hasText) {\n            layerTransformation = `${typeQualifier}_text`;\n        } else if (hasPublicId) {\n            layerTransformation = `${typeQualifier}_${publicId.replace(/\\//g, \":\")}`;\n        } else if (hasUrl) {\n            layerTransformation = `${typeQualifier}_fetch:${(0,_cloudinary_util_util__WEBPACK_IMPORTED_MODULE_1__.encodeBase64)(url)}`;\n        }\n        const primary2 = [];\n        const applied = [];\n        Object.keys(options2).forEach((key)=>{\n            if (!(0,_cloudinary_util_util__WEBPACK_IMPORTED_MODULE_1__.objectHasKey)(primary, key)) return;\n            const { qualifier, converters } = primary[key];\n            const transformation = constructTransformation({\n                qualifier,\n                value: options2[key],\n                converters\n            });\n            if (transformation) {\n                primary2.push(transformation);\n            }\n        });\n        layerEffects.forEach((effect)=>{\n            Object.keys(effect).forEach((key)=>{\n                const effectQualifier = primary[key] || effects[key] || position[key];\n                if (!effectQualifier) return;\n                const { qualifier, prefix, converters } = effectQualifier;\n                const transformation = constructTransformation({\n                    qualifier,\n                    prefix,\n                    value: effect[key],\n                    converters\n                });\n                if (transformation) {\n                    primary2.push(transformation);\n                }\n            });\n        });\n        appliedEffects.forEach((effect)=>{\n            Object.keys(effect).forEach((key)=>{\n                const effectQualifier = primary[key] || effects[key] || position[key];\n                if (!effectQualifier) return;\n                const { qualifier, prefix, converters } = effectQualifier;\n                const transformation = constructTransformation({\n                    qualifier,\n                    prefix,\n                    value: effect[key],\n                    converters\n                });\n                if (transformation) {\n                    applied.push(transformation);\n                }\n            });\n        });\n        const activeLayerFlags = Array.isArray(layerFlags) ? layerFlags : [\n            layerFlags\n        ];\n        activeLayerFlags.forEach((flag)=>{\n            const { success } = flagsEnum.safeParse(flag);\n            if (!success) {\n                if (true) {\n                    console.warn(`Invalid flag ${flag}, not applying.`);\n                }\n                return;\n            }\n            primary2.push(`fl_${flag}`);\n        });\n        const activeAppliedFlags = Array.isArray(appliedFlags) ? appliedFlags : [\n            appliedFlags\n        ];\n        activeAppliedFlags.forEach((flag)=>{\n            const { success } = flagsEnum.safeParse(flag);\n            if (!success) {\n                if (true) {\n                    console.warn(`Invalid flag ${flag}, not applying.`);\n                }\n                return;\n            }\n            applied.push(`fl_${flag}`);\n        });\n        if (hasText) {\n            if (typeof text3 === \"string\") {\n                text3 = {\n                    ...DEFAULT_TEXT_OPTIONS,\n                    text: text3\n                };\n            }\n            const textTransformations = [];\n            if (typeof text3 === \"object\") {\n                const textOptions = Object.keys(text3).filter((key)=>(0,_cloudinary_util_util__WEBPACK_IMPORTED_MODULE_1__.objectHasKey)(text, key)).map((key)=>{\n                    const value = text3 && (0,_cloudinary_util_util__WEBPACK_IMPORTED_MODULE_1__.objectHasKey)(text3, key) && text3[key];\n                    return {\n                        ...text[key],\n                        key,\n                        value,\n                        order: text[key].order || 99\n                    };\n                });\n                const sortedTextOptions = (0,_cloudinary_util_util__WEBPACK_IMPORTED_MODULE_1__.sortByKey)(textOptions, \"order\");\n                for (const textOption of sortedTextOptions){\n                    const { key, value, qualifier, location, converters } = textOption;\n                    let textValue = value;\n                    converters?.forEach(({ test, convert })=>{\n                        if (!test(value)) return;\n                        textValue = convert(value);\n                    });\n                    if (location === \"primary\") {\n                        primary2.push(`${qualifier}_${textValue}`);\n                    } else if (qualifier === \"self\") {\n                        textTransformations.push(key);\n                    } else if (qualifier) {\n                        textTransformations.push(`${qualifier}_${textValue}`);\n                    } else {\n                        textTransformations.push(textValue);\n                    }\n                }\n            }\n            const specialCharacters = {\n                \".\": \"%2E\",\n                \",\": \"%2C\",\n                \"/\": \"%2F\"\n            };\n            let layerText = text3?.text || \"\";\n            if (typeof layerText === \"string\") {\n                Object.keys(specialCharacters)?.forEach((character)=>{\n                    layerText = layerText?.replace(character, specialCharacters[character]);\n                });\n            }\n            layerTransformation = `${layerTransformation}:${textTransformations.join(\"_\")}:${layerText}`;\n        }\n        if (hasPosition) {\n            Object.keys(position2).forEach((key)=>{\n                if (!(0,_cloudinary_util_util__WEBPACK_IMPORTED_MODULE_1__.objectHasKey)(position, key) || !(0,_cloudinary_util_util__WEBPACK_IMPORTED_MODULE_1__.objectHasKey)(position2, key)) return;\n                const { qualifier, converters } = position[key];\n                const transformation = constructTransformation({\n                    qualifier,\n                    value: position2[key],\n                    converters\n                });\n                if (transformation) {\n                    applied.push(transformation);\n                }\n            });\n        }\n        if (primary2.length > 0) {\n            layerTransformation = `${layerTransformation},${primary2.join(\",\")}`;\n        }\n        layerTransformation = `${layerTransformation}/fl_layer_apply,fl_no_overflow`;\n        if (applied.length > 0) {\n            layerTransformation = `${layerTransformation},${applied.join(\",\")}`;\n        }\n        cldAsset.addTransformation(layerTransformation);\n    }\n    return {};\n}\n// src/plugins/raw-transformations.ts\nvar raw_transformations_exports = {};\n__export(raw_transformations_exports, {\n    assetTypes: ()=>assetTypes6,\n    plugin: ()=>plugin6,\n    props: ()=>props6\n});\n\nvar RawTransformationSchema = zod__WEBPACK_IMPORTED_MODULE_0__.string();\nvar props6 = {\n    rawTransformations: zod__WEBPACK_IMPORTED_MODULE_0__.union([\n        RawTransformationSchema,\n        zod__WEBPACK_IMPORTED_MODULE_0__.array(RawTransformationSchema)\n    ]).describe(JSON.stringify({\n        text: \"Array of transformation parameters using the Cloudinary URL API to apply to an asset.\",\n        url: \"https://cloudinary.com/documentation/transformation_reference\"\n    })).optional()\n};\nvar assetTypes6 = [\n    \"image\",\n    \"images\",\n    \"video\",\n    \"videos\"\n];\nfunction plugin6(props20) {\n    const { cldAsset, options } = props20;\n    let { rawTransformations = [] } = options;\n    if (!Array.isArray(rawTransformations)) {\n        rawTransformations = [\n            rawTransformations\n        ];\n    }\n    rawTransformations.forEach((transformation)=>{\n        cldAsset.addTransformation(transformation);\n    });\n    return {};\n}\n// src/plugins/remove-background.ts\nvar remove_background_exports = {};\n__export(remove_background_exports, {\n    assetTypes: ()=>assetTypes7,\n    plugin: ()=>plugin7,\n    props: ()=>props7\n});\n\nvar props7 = {\n    removeBackground: zod__WEBPACK_IMPORTED_MODULE_0__.boolean().describe(JSON.stringify({\n        text: \"Removes the background of an image using the Cloudinary AI Background Removal Add-On (Required).\",\n        url: \"https://cloudinary.com/documentation/cloudinary_ai_background_removal_addon\"\n    })).optional()\n};\nvar assetTypes7 = [\n    \"image\",\n    \"images\"\n];\nfunction plugin7(props20) {\n    const { cldAsset, options } = props20;\n    const { removeBackground = false } = options;\n    if (removeBackground) {\n        cldAsset.effect(\"e_background_removal\");\n    }\n    return {};\n}\n// src/plugins/sanitize.ts\nvar sanitize_exports = {};\n__export(sanitize_exports, {\n    assetTypes: ()=>assetTypes8,\n    plugin: ()=>plugin8,\n    props: ()=>props8\n});\n\nvar props8 = {\n    sanitize: zod__WEBPACK_IMPORTED_MODULE_0__.boolean().describe(JSON.stringify({\n        text: \"Runs a sanitizer on SVG images.\",\n        url: \"https://cloudinary.com/documentation/transformation_reference#fl_sanitize\"\n    })).optional()\n};\nvar assetTypes8 = [\n    \"image\",\n    \"images\"\n];\nfunction plugin8(props20) {\n    const { cldAsset, options } = props20;\n    const { sanitize = true } = options;\n    const shouldApplySanitizer = sanitize && (options.format === \"svg\" || cldAsset.publicID.endsWith(\".svg\"));\n    if (shouldApplySanitizer) {\n        cldAsset.effect(\"fl_sanitize\");\n    }\n    return {};\n}\n// src/plugins/seo.ts\nvar seo_exports = {};\n__export(seo_exports, {\n    assetTypes: ()=>assetTypes9,\n    plugin: ()=>plugin9,\n    props: ()=>props9\n});\n\nvar props9 = {\n    seoSuffix: zod__WEBPACK_IMPORTED_MODULE_0__.string().describe(JSON.stringify({\n        text: \"Configures the URL to include an SEO-friendly suffix in the URL\",\n        url: \"https://cloudinary.com/documentation/advanced_url_delivery_options#seo_friendly_media_asset_urls\"\n    })).optional()\n};\nvar assetTypes9 = [\n    \"image\",\n    \"images\",\n    \"video\",\n    \"videos\"\n];\nfunction plugin9(props20) {\n    const { cldAsset, options } = props20;\n    const { seoSuffix } = options;\n    if (typeof seoSuffix === \"string\") {\n        if (options.deliveryType === \"fetch\") {\n            console.warn(\"SEO suffix is not supported with a delivery type of fetch\");\n        } else {\n            cldAsset.setSuffix(seoSuffix);\n        }\n    }\n    return {};\n}\n// src/plugins/underlays.ts\nvar underlays_exports = {};\n__export(underlays_exports, {\n    assetTypes: ()=>assetTypes10,\n    plugin: ()=>plugin10,\n    props: ()=>props10\n});\n\n\nvar underlayPositionSchema = zod__WEBPACK_IMPORTED_MODULE_0__.object({\n    angle: angle.schema.optional(),\n    gravity: gravity.schema.optional(),\n    x: x.schema.optional(),\n    y: y.schema.optional()\n});\nvar underlaySchema = zod__WEBPACK_IMPORTED_MODULE_0__.object({\n    appliedEffects: zod__WEBPACK_IMPORTED_MODULE_0__.array(zod__WEBPACK_IMPORTED_MODULE_0__.object({})).optional(),\n    appliedFlags: flags.schema.optional(),\n    effects: zod__WEBPACK_IMPORTED_MODULE_0__.array(zod__WEBPACK_IMPORTED_MODULE_0__.object({})).optional(),\n    crop: crop.schema.optional(),\n    flags: flags.schema.optional(),\n    height: height.schema.optional(),\n    position: underlayPositionSchema.optional(),\n    publicId: zod__WEBPACK_IMPORTED_MODULE_0__.string().optional(),\n    type: zod__WEBPACK_IMPORTED_MODULE_0__.string().optional(),\n    url: zod__WEBPACK_IMPORTED_MODULE_0__.string().optional(),\n    width: width.schema.optional()\n});\nvar props10 = {\n    underlay: zod__WEBPACK_IMPORTED_MODULE_0__.string().describe(JSON.stringify({\n        text: \"Public ID of image that is applied under the base image.\",\n        url: \"https://cloudinary.com/documentation/transformation_reference#l_layer\"\n    })).optional(),\n    underlays: zod__WEBPACK_IMPORTED_MODULE_0__.array(underlaySchema).describe(JSON.stringify({\n        text: \"Image layers that are applied under the base image.\",\n        url: \"https://cloudinary.com/documentation/transformation_reference#l_layer\"\n    })).optional()\n};\nvar assetTypes10 = [\n    \"image\",\n    \"images\",\n    \"video\",\n    \"videos\"\n];\nfunction plugin10(props20) {\n    const { cldAsset, options } = props20;\n    const { underlay, underlays = [] } = options;\n    const typeQualifier = \"u\";\n    if (Array.isArray(underlays)) {\n        underlays.forEach(applyUnderlay);\n    }\n    if (typeof underlay === \"string\") {\n        const underlayOptions = {\n            publicId: underlay,\n            crop: \"fill\",\n            width: \"1.0\",\n            height: \"1.0\",\n            flags: [\n                \"relative\"\n            ]\n        };\n        applyUnderlay(underlayOptions);\n    }\n    function applyUnderlay({ publicId, type, position: position2, effects: layerEffects = [], flags: layerFlags = [], appliedFlags = [], ...options2 }) {\n        const hasPublicId = typeof publicId === \"string\";\n        const hasPosition = typeof position2 === \"object\";\n        if (!hasPublicId) {\n            console.warn(`An ${type} is missing a Public ID`);\n            return;\n        }\n        let layerTransformation = `${typeQualifier}_${publicId.replace(/\\//g, \":\")}`;\n        const primary2 = [];\n        const applied = [];\n        Object.keys(options2).forEach((key)=>{\n            if (!(0,_cloudinary_util_util__WEBPACK_IMPORTED_MODULE_1__.objectHasKey)(primary, key)) return;\n            const { qualifier } = primary[key];\n            primary2.push(`${qualifier}_${options2[key]}`);\n        });\n        layerEffects.forEach((effect)=>{\n            Object.keys(effect).forEach((key)=>{\n                if (!(0,_cloudinary_util_util__WEBPACK_IMPORTED_MODULE_1__.objectHasKey)(primary, key)) return;\n                const { qualifier } = primary[key];\n                primary2.push(`${qualifier}_${effect[key]}`);\n            });\n        });\n        if (hasPosition) {\n            Object.keys(position2).forEach((key)=>{\n                if (!(0,_cloudinary_util_util__WEBPACK_IMPORTED_MODULE_1__.objectHasKey)(position, key)) return;\n                const { qualifier } = position[key];\n                applied.push(`${qualifier}_${position2[key]}`);\n            });\n        }\n        const activeLayerFlags = Array.isArray(layerFlags) ? layerFlags : [\n            layerFlags\n        ];\n        activeLayerFlags.forEach((flag)=>{\n            const { success } = flagsEnum.safeParse(flag);\n            if (!success) {\n                if (true) {\n                    console.warn(`Invalid flag ${flag}, not applying.`);\n                }\n                return;\n            }\n            primary2.push(`fl_${flag}`);\n        });\n        const activeAppliedFlags = Array.isArray(appliedFlags) ? appliedFlags : [\n            appliedFlags\n        ];\n        activeAppliedFlags.forEach((flag)=>{\n            const { success } = flagsEnum.safeParse(flag);\n            if (!success) {\n                if (true) {\n                    console.warn(`Invalid flag ${flag}, not applying.`);\n                }\n                return;\n            }\n            applied.push(`fl_${flag}`);\n        });\n        layerTransformation = `${layerTransformation},${primary2.join(\",\")}`;\n        layerTransformation = `${layerTransformation}/fl_layer_apply,fl_no_overflow`;\n        if (applied.length > 0) {\n            layerTransformation = `${layerTransformation},${applied.join(\",\")}`;\n        }\n        cldAsset.addTransformation(layerTransformation);\n    }\n    return {};\n}\n// src/plugins/version.ts\nvar version_exports = {};\n__export(version_exports, {\n    assetTypes: ()=>assetTypes11,\n    plugin: ()=>plugin11,\n    props: ()=>props11\n});\n\nvar props11 = {\n    version: zod__WEBPACK_IMPORTED_MODULE_0__.union([\n        zod__WEBPACK_IMPORTED_MODULE_0__.number(),\n        zod__WEBPACK_IMPORTED_MODULE_0__.string()\n    ]).describe(JSON.stringify({\n        text: \"Custom version number to apply to asset URL.\",\n        url: \"https://cloudinary.com/documentation/advanced_url_delivery_options#asset_versions\"\n    })).optional()\n};\nvar assetTypes11 = [\n    \"image\",\n    \"images\",\n    \"video\",\n    \"videos\"\n];\nfunction plugin11(props20) {\n    const { cldAsset, options } = props20;\n    const { version } = options;\n    if (typeof version === \"string\" || typeof version === \"number\") {\n        cldAsset.setVersion(`${version}`.replace(\"v\", \"\"));\n    }\n    return {};\n}\n// src/types/asset.ts\nvar assetOptionsSchema = zod__WEBPACK_IMPORTED_MODULE_0__.object({\n    assetType: zod__WEBPACK_IMPORTED_MODULE_0__.string().default(\"image\").describe(JSON.stringify({\n        text: \"The type of asset to deliver.\",\n        url: \"https://cloudinary.com/documentation/image_transformations#transformation_url_structure\"\n    })).optional(),\n    deliveryType: zod__WEBPACK_IMPORTED_MODULE_0__.string().default(\"upload\").describe(JSON.stringify({\n        text: \"Delivery method of the asset.\",\n        url: \"https://cloudinary.com/documentation/image_transformations#delivery_types\"\n    })).optional(),\n    dpr: zod__WEBPACK_IMPORTED_MODULE_0__.union([\n        zod__WEBPACK_IMPORTED_MODULE_0__.string(),\n        zod__WEBPACK_IMPORTED_MODULE_0__.number()\n    ]).describe(JSON.stringify({\n        text: \"Delivery method of the asset.\",\n        url: \"https://cloudinary.com/documentation/image_transformations#delivery_types\"\n    })).optional(),\n    format: zod__WEBPACK_IMPORTED_MODULE_0__.string().default(\"auto\").describe(JSON.stringify({\n        text: \"Converts (if necessary) and delivers an asset in the specified format.\",\n        url: \"https://cloudinary.com/documentation/transformation_reference#f_format\"\n    })).optional(),\n    height: zod__WEBPACK_IMPORTED_MODULE_0__.union([\n        zod__WEBPACK_IMPORTED_MODULE_0__.string(),\n        zod__WEBPACK_IMPORTED_MODULE_0__.number()\n    ]).describe(JSON.stringify({\n        text: \"Height of the given asset.\"\n    })).optional(),\n    quality: zod__WEBPACK_IMPORTED_MODULE_0__.union([\n        zod__WEBPACK_IMPORTED_MODULE_0__.number(),\n        zod__WEBPACK_IMPORTED_MODULE_0__.string()\n    ]).default(\"auto\").describe(JSON.stringify({\n        text: \"Quality of the delivered asset\",\n        url: \"https://cloudinary.com/documentation/transformation_reference#q_quality\"\n    })).optional(),\n    src: zod__WEBPACK_IMPORTED_MODULE_0__.string().describe(JSON.stringify({\n        text: \"Cloudinary Public ID or versioned Cloudinary URL (/v1234/)\"\n    })),\n    strictTransformations: zod__WEBPACK_IMPORTED_MODULE_0__.boolean().describe(JSON.stringify({\n        text: \"Gives you the ability to have more control over what transformations are permitted to be used from your Cloudinary account.\",\n        url: \"https://cloudinary.com/documentation/control_access_to_media#strict_transformations\"\n    })).optional(),\n    width: zod__WEBPACK_IMPORTED_MODULE_0__.union([\n        zod__WEBPACK_IMPORTED_MODULE_0__.string(),\n        zod__WEBPACK_IMPORTED_MODULE_0__.number()\n    ]).describe(JSON.stringify({\n        text: \"Width of the given asset.\"\n    })).optional(),\n    // Spreading plugins instead of extend or merge to avoid excessive schema warning\n    // https://github.com/microsoft/TypeScript/issues/34933#issuecomment-1772787785\n    ...props,\n    ...props2,\n    ...props3,\n    ...props4,\n    ...props5,\n    ...props6,\n    ...props7,\n    ...props8,\n    ...props9,\n    ...props10,\n    ...props11\n});\n// src/types/image.ts\n\n// src/plugins/default-image.ts\nvar default_image_exports = {};\n__export(default_image_exports, {\n    assetTypes: ()=>assetTypes12,\n    plugin: ()=>plugin12,\n    props: ()=>props12\n});\n\n\nvar props12 = {\n    defaultImage: zod__WEBPACK_IMPORTED_MODULE_0__.string().describe(JSON.stringify({\n        text: \"Configures the default image to use in case the given public ID is not available. Must include file extension.\",\n        url: \"https://cloudinary.com/documentation/transformation_reference#d_default_image\"\n    })).optional()\n};\nvar assetTypes12 = [\n    \"image\",\n    \"images\"\n];\nfunction plugin12(props20) {\n    const { cldAsset, options } = props20;\n    const { defaultImage } = options;\n    if (typeof defaultImage === \"string\") {\n        if (!(0,_cloudinary_util_util__WEBPACK_IMPORTED_MODULE_1__.getFormat)(defaultImage)) {\n            console.warn(`The defaultImage prop may be missing a format and must include it along with the public ID. (Ex: myimage.jpg)`);\n        }\n        const defaultImageId = defaultImage.replace(/\\//g, \":\");\n        cldAsset.addTransformation(`d_${defaultImageId}`);\n    }\n    return {};\n}\n// src/plugins/fill-background.ts\nvar fill_background_exports = {};\n__export(fill_background_exports, {\n    assetTypes: ()=>assetTypes13,\n    plugin: ()=>plugin13,\n    props: ()=>props13\n});\n\nvar props13 = {\n    fillBackground: zod__WEBPACK_IMPORTED_MODULE_0__.union([\n        zod__WEBPACK_IMPORTED_MODULE_0__.boolean(),\n        zod__WEBPACK_IMPORTED_MODULE_0__.object({\n            crop: crop.schema.optional(),\n            gravity: gravity.schema.optional(),\n            prompt: zod__WEBPACK_IMPORTED_MODULE_0__.string().optional()\n        })\n    ]).describe(JSON.stringify({\n        text: \"Uses Generative Fill to extended padded image with AI\",\n        url: \"https://cloudinary.com/documentation/transformation_reference#b_gen_fill\"\n    })).optional()\n};\nvar assetTypes13 = [\n    \"image\",\n    \"images\"\n];\nvar defaultCrop = \"pad\";\nfunction plugin13(props20) {\n    const { cldAsset, options } = props20;\n    const { fillBackground } = options;\n    if (fillBackground === true) {\n        const properties = [\n            \"b_gen_fill\",\n            `ar_${options.width}:${options.height}`,\n            `w_${options.width}`,\n            `c_${defaultCrop}`\n        ];\n        cldAsset.addTransformation(properties.join(\",\"));\n    } else if (typeof fillBackground === \"object\") {\n        const { crop: crop2 = defaultCrop, gravity: gravity2, prompt } = fillBackground;\n        const properties = [\n            `ar_${options.width}:${options.height}`,\n            `w_${options.width}`,\n            `c_${crop2}`\n        ];\n        if (typeof prompt === \"string\") {\n            properties.unshift(`b_gen_fill:${prompt}`);\n        } else {\n            properties.unshift(`b_gen_fill`);\n        }\n        if (typeof gravity2 === \"string\") {\n            properties.push(`g_${gravity2}`);\n        }\n        cldAsset.addTransformation(properties.join(\",\"));\n    }\n    return {};\n}\n// src/plugins/recolor.ts\nvar recolor_exports = {};\n__export(recolor_exports, {\n    assetTypes: ()=>assetTypes14,\n    plugin: ()=>plugin14,\n    props: ()=>props14\n});\n\nvar imageOptionsRecolorPromptSchema = zod__WEBPACK_IMPORTED_MODULE_0__.union([\n    zod__WEBPACK_IMPORTED_MODULE_0__.string(),\n    zod__WEBPACK_IMPORTED_MODULE_0__.array(zod__WEBPACK_IMPORTED_MODULE_0__.string())\n]);\nvar imageOptionsRecolorSchema = zod__WEBPACK_IMPORTED_MODULE_0__.object({\n    prompt: imageOptionsRecolorPromptSchema.optional(),\n    to: zod__WEBPACK_IMPORTED_MODULE_0__.string().optional(),\n    multiple: zod__WEBPACK_IMPORTED_MODULE_0__.boolean().optional()\n});\nvar props14 = {\n    recolor: zod__WEBPACK_IMPORTED_MODULE_0__.union([\n        imageOptionsRecolorPromptSchema,\n        imageOptionsRecolorSchema\n    ]).describe(JSON.stringify({\n        text: \"Uses generative AI to recolor parts of your image, maintaining the relative shading.\",\n        url: \"https://cloudinary.com/documentation/transformation_reference#e_gen_recolor\"\n    })).optional()\n};\nvar assetTypes14 = [\n    \"image\",\n    \"images\"\n];\nfunction plugin14(props20) {\n    const { cldAsset, options } = props20;\n    const { recolor } = options;\n    const recolorOptions = {\n        prompt: void 0,\n        \"to-color\": void 0,\n        multiple: void 0\n    };\n    if (Array.isArray(recolor)) {\n        if (Array.isArray(recolor[0])) {\n            recolorOptions.prompt = promptArrayToString(recolor[0]);\n        } else {\n            recolorOptions.prompt = recolor[0];\n        }\n        if (typeof recolor[1] === \"string\") {\n            recolorOptions[\"to-color\"] = recolor[1];\n        }\n    } else if (typeof recolor === \"object\") {\n        if (typeof recolor.prompt === \"string\") {\n            recolorOptions.prompt = recolor.prompt;\n        } else if (Array.isArray(recolor.prompt)) {\n            recolorOptions.prompt = promptArrayToString(recolor.prompt);\n        }\n        if (typeof recolor.to === \"string\") {\n            recolorOptions[\"to-color\"] = recolor.to;\n        }\n        if (recolor.multiple === true) {\n            recolorOptions.multiple = `true`;\n        }\n    }\n    const transformation = Object.entries(recolorOptions).filter(([, value])=>!!value).map(([key, value])=>`${key}_${value}`).join(\";\");\n    if (transformation) {\n        cldAsset.addTransformation(`e_gen_recolor:${transformation}`);\n    }\n    return {};\n}\n// src/plugins/remove.ts\nvar remove_exports = {};\n__export(remove_exports, {\n    assetTypes: ()=>assetTypes15,\n    plugin: ()=>plugin15,\n    props: ()=>props15\n});\n\nvar imageOptionsRemovePromptSchema = zod__WEBPACK_IMPORTED_MODULE_0__.union([\n    zod__WEBPACK_IMPORTED_MODULE_0__.string(),\n    zod__WEBPACK_IMPORTED_MODULE_0__.array(zod__WEBPACK_IMPORTED_MODULE_0__.string())\n]);\nvar imageOptionsRemoveSchema = zod__WEBPACK_IMPORTED_MODULE_0__.object({\n    prompt: imageOptionsRemovePromptSchema.optional(),\n    region: zod__WEBPACK_IMPORTED_MODULE_0__.union([\n        zod__WEBPACK_IMPORTED_MODULE_0__.array(zod__WEBPACK_IMPORTED_MODULE_0__.number()),\n        zod__WEBPACK_IMPORTED_MODULE_0__.array(zod__WEBPACK_IMPORTED_MODULE_0__.array(zod__WEBPACK_IMPORTED_MODULE_0__.number()))\n    ]).optional(),\n    multiple: zod__WEBPACK_IMPORTED_MODULE_0__.boolean().optional(),\n    removeShadow: zod__WEBPACK_IMPORTED_MODULE_0__.boolean().optional()\n});\nvar props15 = {\n    remove: zod__WEBPACK_IMPORTED_MODULE_0__.union([\n        imageOptionsRemovePromptSchema,\n        imageOptionsRemoveSchema\n    ]).describe(JSON.stringify({\n        text: \"Applies zooming and/or panning to an image, resulting in a video or animated image.\",\n        url: \"https://cloudinary.com/documentation/transformation_reference#e_zoompan\"\n    })).optional()\n};\nvar assetTypes15 = [\n    \"image\",\n    \"images\"\n];\nfunction plugin15(props20) {\n    const { cldAsset, options } = props20;\n    const { remove } = options;\n    const removeOptions = {\n        prompt: void 0,\n        region: void 0,\n        multiple: void 0,\n        \"remove-shadow\": void 0\n    };\n    if (typeof remove === \"string\") {\n        removeOptions.prompt = remove;\n    } else if (Array.isArray(remove)) {\n        removeOptions.prompt = promptArrayToString(remove);\n    } else if (typeof remove === \"object\") {\n        const hasPrompt = typeof remove.prompt === \"string\" || Array.isArray(remove.prompt);\n        const hasRegion = Array.isArray(remove.region);\n        if (hasPrompt && hasRegion) {\n            throw new Error(\"Invalid remove options: you can not have both a prompt and a region. More info: https://cloudinary.com/documentation/transformation_reference#e_gen_remove\");\n        }\n        if (typeof remove.prompt === \"string\") {\n            removeOptions.prompt = remove.prompt;\n        } else if (Array.isArray(remove.prompt)) {\n            removeOptions.prompt = promptArrayToString(remove.prompt);\n        }\n        if (Array.isArray(remove.region)) {\n            removeOptions.region = regionArrayToString(remove.region);\n        }\n        if (remove.multiple === true) {\n            removeOptions.multiple = `true`;\n        }\n        if (remove.removeShadow === true) {\n            removeOptions[\"remove-shadow\"] = `true`;\n        }\n    }\n    const transformation = Object.entries(removeOptions).filter(([, value])=>!!value).map(([key, value])=>`${key}_${value}`).join(\";\");\n    if (transformation) {\n        cldAsset.addTransformation(`e_gen_remove:${transformation}`);\n    }\n    return {};\n}\nfunction regionArrayToString(regionArray) {\n    const indexes = {\n        0: \"x\",\n        1: \"y\",\n        2: \"w\",\n        3: \"h\"\n    };\n    const regionString = regionArray.map((region, index)=>{\n        if (Array.isArray(region)) {\n            return regionArrayToString(region);\n        }\n        const key = indexes[index];\n        return `${key}_${region}`;\n    }).join(\";\");\n    return `(${regionString})`;\n}\n// src/plugins/restore.ts\nvar restore_exports = {};\n__export(restore_exports, {\n    assetTypes: ()=>assetTypes16,\n    plugin: ()=>plugin16,\n    props: ()=>props16\n});\n\nvar props16 = {\n    restore: zod__WEBPACK_IMPORTED_MODULE_0__.boolean().describe(JSON.stringify({\n        text: \"Uses generative AI to restore details in poor quality images or images that may have become degraded through repeated processing and compression.\",\n        url: \"https://cloudinary.com/documentation/transformation_reference#e_gen_restore\"\n    })).optional()\n};\nvar assetTypes16 = [\n    \"image\",\n    \"images\"\n];\nfunction plugin16(props20) {\n    const { cldAsset, options } = props20;\n    const { restore = false } = options;\n    if (restore) {\n        cldAsset.effect(\"e_gen_restore\");\n    }\n    return {};\n}\n// src/plugins/replace.ts\nvar replace_exports = {};\n__export(replace_exports, {\n    assetTypes: ()=>assetTypes17,\n    plugin: ()=>plugin17,\n    props: ()=>props17\n});\n\nvar props17 = {\n    replace: zod__WEBPACK_IMPORTED_MODULE_0__.union([\n        zod__WEBPACK_IMPORTED_MODULE_0__.array(zod__WEBPACK_IMPORTED_MODULE_0__.string()),\n        zod__WEBPACK_IMPORTED_MODULE_0__.array(zod__WEBPACK_IMPORTED_MODULE_0__.boolean()),\n        zod__WEBPACK_IMPORTED_MODULE_0__.object({\n            to: zod__WEBPACK_IMPORTED_MODULE_0__.string(),\n            from: zod__WEBPACK_IMPORTED_MODULE_0__.string(),\n            preserveGeometry: zod__WEBPACK_IMPORTED_MODULE_0__.boolean().optional()\n        })\n    ]).describe(JSON.stringify({\n        text: \"Uses generative AI to replace parts of your image with something else.\",\n        url: \"https://cloudinary.com/documentation/transformation_reference#e_gen_replace\"\n    })).optional()\n};\nvar assetTypes17 = [\n    \"image\",\n    \"images\"\n];\nfunction plugin17(props20) {\n    const { cldAsset, options } = props20;\n    const { replace = null } = options;\n    if (replace) {\n        let from, to, preserveGeometry = false;\n        if (Array.isArray(replace)) {\n            from = replace[0];\n            to = replace[1];\n            preserveGeometry = replace[2] || false;\n        } else {\n            from = replace.from;\n            to = replace.to;\n            preserveGeometry = replace.preserveGeometry || false;\n        }\n        const properties = [\n            `e_gen_replace:from_${from}`,\n            `to_${to}`\n        ];\n        if (preserveGeometry) {\n            properties.push(`preserve-geometry_${preserveGeometry}`);\n        }\n        cldAsset.effect(properties.join(\";\"));\n    }\n    return {};\n}\n// src/plugins/zoompan.ts\nvar zoompan_exports = {};\n__export(zoompan_exports, {\n    assetTypes: ()=>assetTypes18,\n    plugin: ()=>plugin18,\n    props: ()=>props18\n});\n\nvar props18 = {\n    zoompan: zod__WEBPACK_IMPORTED_MODULE_0__.union([\n        zod__WEBPACK_IMPORTED_MODULE_0__.string(),\n        zod__WEBPACK_IMPORTED_MODULE_0__.boolean(),\n        zod__WEBPACK_IMPORTED_MODULE_0__.object({\n            loop: zod__WEBPACK_IMPORTED_MODULE_0__.union([\n                zod__WEBPACK_IMPORTED_MODULE_0__.string(),\n                zod__WEBPACK_IMPORTED_MODULE_0__.boolean()\n            ]),\n            options: zod__WEBPACK_IMPORTED_MODULE_0__.string()\n        })\n    ]).describe(JSON.stringify({\n        text: \"Applies zooming and/or panning to an image, resulting in a video or animated image.\",\n        url: \"https://cloudinary.com/documentation/transformation_reference#e_zoompan\"\n    })).optional()\n};\nvar assetTypes18 = [\n    \"image\",\n    \"images\"\n];\nfunction plugin18(props20) {\n    const { cldAsset, options } = props20;\n    const { zoompan = false } = options;\n    const overrides = {\n        format: void 0\n    };\n    if (zoompan === true) {\n        cldAsset.effect(\"e_zoompan\");\n    } else if (typeof zoompan === \"string\") {\n        if (zoompan === \"loop\") {\n            cldAsset.effect(\"e_zoompan\");\n            cldAsset.effect(\"e_loop\");\n        } else {\n            cldAsset.effect(`e_zoompan:${zoompan}`);\n        }\n    } else if (typeof zoompan === \"object\") {\n        let zoompanEffect = \"e_zoompan\";\n        if (typeof zoompan.options === \"string\") {\n            zoompanEffect = `${zoompanEffect}${zoompan.options}`;\n        }\n        cldAsset.effect(zoompanEffect);\n        let loopEffect;\n        if (zoompan.loop === true) {\n            loopEffect = \"e_loop\";\n        } else if (typeof zoompan.loop === \"string\") {\n            loopEffect = `e_loop${zoompan.loop}`;\n        }\n        if (loopEffect) {\n            cldAsset.effect(loopEffect);\n        }\n    }\n    if (zoompan !== false) {\n        overrides.format = \"auto:animated\";\n    }\n    return {\n        options: overrides\n    };\n}\n// src/types/image.ts\nvar imageOptionsSchema = assetOptionsSchema.merge(zod__WEBPACK_IMPORTED_MODULE_0__.object({\n    // Spreading plugins instead of extend or merge to avoid excessive schema warning\n    // https://github.com/microsoft/TypeScript/issues/34933#issuecomment-1772787785\n    ...props12,\n    ...props13,\n    ...props14,\n    ...props15,\n    ...props17,\n    ...props16,\n    ...props18\n}));\n// src/types/video.ts\n\n// src/plugins/abr.ts\nvar abr_exports = {};\n__export(abr_exports, {\n    assetTypes: ()=>assetTypes19,\n    plugin: ()=>plugin19,\n    props: ()=>props19\n});\n\nvar props19 = {\n    streamingProfile: zod__WEBPACK_IMPORTED_MODULE_0__.string().describe(JSON.stringify({\n        text: \"The streaming profile to apply when delivering a video using adaptive bitrate streaming.\",\n        url: \"https://cloudinary.com/documentation/transformation_reference#sp_streaming_profile\"\n    })).optional()\n};\nvar assetTypes19 = [\n    \"video\",\n    \"videos\"\n];\nfunction plugin19(props20) {\n    const { cldAsset, options } = props20;\n    const { streamingProfile } = options;\n    if (typeof streamingProfile === \"string\") {\n        cldAsset.addTransformation(`sp_${streamingProfile}`);\n    }\n    return {};\n}\n// src/types/video.ts\nvar videoOptionsSchema = assetOptionsSchema.merge(zod__WEBPACK_IMPORTED_MODULE_0__.object({\n    // Spreading plugins instead of extend or merge to avoid excessive schema warning\n    // https://github.com/microsoft/TypeScript/issues/34933#issuecomment-1772787785\n    ...props19\n}));\n// src/lib/cloudinary.ts\n\n\n\n// src/types/analytics.ts\n\nvar analyticsOptionsSchema = zod__WEBPACK_IMPORTED_MODULE_0__.any();\n// src/types/config.ts\n\nvar configOptionsSchema = zod__WEBPACK_IMPORTED_MODULE_0__.any();\n// src/lib/cloudinary.ts\nvar transformationPlugins = [\n    // Some features *must* be the first transformation applied\n    // thus their plugins *must* come first in the chain\n    recolor_exports,\n    remove_exports,\n    remove_background_exports,\n    replace_exports,\n    restore_exports,\n    // Raw transformations should always come before\n    // other arguments to avoid conflicting with\n    // added options via the component\n    raw_transformations_exports,\n    abr_exports,\n    cropping_exports,\n    default_image_exports,\n    effects_exports,\n    fill_background_exports,\n    flags_exports,\n    overlays_exports,\n    sanitize_exports,\n    named_transformations_exports,\n    seo_exports,\n    underlays_exports,\n    version_exports,\n    zoompan_exports\n];\nvar constructUrlPropsSchema = zod__WEBPACK_IMPORTED_MODULE_0__.object({\n    analytics: zod__WEBPACK_IMPORTED_MODULE_0__.union([\n        analyticsOptionsSchema,\n        zod__WEBPACK_IMPORTED_MODULE_0__.boolean()\n    ]).describe(JSON.stringify({\n        text: \"Tech, dependency, and feature identifiers for tracking SDK usage related to Cloudinary.\",\n        path: \"/url-loader/analyticsoptions\"\n    })).optional(),\n    config: configOptionsSchema.describe(JSON.stringify({\n        text: \"Configuration parameters for environment and Cloudinary account.\",\n        url: \"https://cloudinary.com/documentation/cloudinary_sdks#configuration_parameters\",\n        path: \"/url-loader/analyticsoptions\"\n    })).optional(),\n    options: zod__WEBPACK_IMPORTED_MODULE_0__.union([\n        assetOptionsSchema,\n        imageOptionsSchema,\n        videoOptionsSchema\n    ]).describe(JSON.stringify({\n        text: \"Asset options (Image or Video) that define delivery URL including public ID and transformations.\",\n        path: \"/url-loader/assetoptions\"\n    }))\n});\nfunction constructCloudinaryUrl({ options, config = {}, analytics }) {\n    if (analytics === false) {\n        if (typeof config?.url === \"undefined\") {\n            config.url = {};\n        }\n        config.url.analytics = false;\n    }\n    const cld = new _cloudinary_url_gen__WEBPACK_IMPORTED_MODULE_2__.Cloudinary(config);\n    if (typeof options?.src !== \"string\") {\n        throw Error(`Failed to construct Cloudinary URL: Missing source (src) in options`);\n    }\n    if (!options?.assetType) {\n        options.assetType = \"image\";\n    }\n    const propsCheck = [];\n    transformationPlugins.forEach(({ props: props20 })=>{\n        const pluginProps = Object.keys(props20);\n        pluginProps.forEach((prop)=>{\n            if (propsCheck.includes(prop)) {\n                throw new Error(`Option ${prop} already exists!`);\n            }\n            propsCheck.push(prop);\n        });\n    });\n    const parsedOptions = {};\n    let publicId;\n    if (typeof options.src === \"string\" && /^https?:\\/\\//.test(options.src)) {\n        try {\n            const parts = (0,_cloudinary_util_util__WEBPACK_IMPORTED_MODULE_1__.parseUrl)(options.src);\n            publicId = parts?.publicId;\n            parsedOptions.seoSuffix = parts?.seoSuffix;\n            parsedOptions.version = parts?.version;\n        } catch (e) {}\n    }\n    if (!publicId) {\n        publicId = options.src;\n    }\n    Object.keys(parsedOptions).forEach((key)=>{\n        if ((0,_cloudinary_util_util__WEBPACK_IMPORTED_MODULE_1__.objectHasKey)(options, key)) return;\n        options[key] = parsedOptions[key];\n    });\n    let cldAsset = void 0;\n    if ([\n        \"image\",\n        \"images\"\n    ].includes(options.assetType)) {\n        cldAsset = cld.image(publicId);\n    } else if ([\n        \"video\",\n        \"videos\"\n    ].includes(options.assetType)) {\n        cldAsset = cld.video(publicId);\n    }\n    if (typeof cldAsset === \"undefined\") {\n        throw new Error(\"Invalid asset type.\");\n    }\n    const pluginEffects = {};\n    transformationPlugins.forEach(({ plugin: plugin20, assetTypes: assetTypes20, props: props20, strict: strict2 })=>{\n        const supportedAssetType = typeof options?.assetType !== \"undefined\" && assetTypes20.includes(options?.assetType);\n        const pluginProps = Object.keys(props20);\n        const optionsKeys = Object.keys(options);\n        const attemptedUse = pluginProps.map((prop)=>optionsKeys.includes(prop)).filter((isUsed)=>!!isUsed).length > 0;\n        if (!supportedAssetType) {\n            if (attemptedUse) {\n                console.warn(`One of the following props [${pluginProps.join(\", \")}] was used with an unsupported asset type [${options?.assetType}]`);\n            }\n            return;\n        }\n        if (options.strictTransformations && !strict2) {\n            if (attemptedUse) {\n                console.warn(`One of the following props [${pluginProps.join(\", \")}] was used that is not supported with Strict Transformations.`);\n            }\n            return;\n        }\n        const results = plugin20({\n            cldAsset,\n            options\n        });\n        const { options: pluginOptions } = results || {\n            options: void 0\n        };\n        if (pluginOptions?.format && options) {\n            pluginEffects.format = pluginOptions.format;\n        }\n        if (pluginOptions?.width && options) {\n            pluginEffects.resize = {\n                width: pluginOptions?.width\n            };\n        }\n    });\n    if (pluginEffects?.resize && !options.strictTransformations) {\n        const { width: width2, crop: crop2 = \"limit\" } = pluginEffects.resize;\n        cldAsset.effect(`c_${crop2},w_${width2}`);\n    }\n    cldAsset.setDeliveryType(options?.deliveryType || \"upload\");\n    if (!options.strictTransformations) {\n        if (options?.dpr) {\n            let dpr = options.dpr;\n            if (typeof dpr === \"number\") {\n                dpr = dpr.toFixed(1);\n            }\n            cldAsset.addTransformation(`dpr_${dpr}`);\n        }\n        if (options?.format !== \"default\") {\n            cldAsset.format(options?.format || pluginEffects?.format || \"auto\");\n        }\n        if (options?.quality !== \"default\") {\n            cldAsset.quality(options?.quality || \"auto\");\n        }\n    }\n    return cldAsset.toURL({\n        trackedAnalytics: analytics\n    });\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@cloudinary-util/url-loader/dist/chunk-P4VNHLSM.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@cloudinary-util/url-loader/node_modules/@cloudinary-util/util/dist/index.mjs":
/*!****************************************************************************************************!*\
  !*** ./node_modules/@cloudinary-util/url-loader/node_modules/@cloudinary-util/util/dist/index.mjs ***!
  \****************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   convertColorHexToRgb: () => (/* binding */ convertColorHexToRgb),\n/* harmony export */   encodeBase64: () => (/* binding */ encodeBase64),\n/* harmony export */   getFormat: () => (/* binding */ getFormat),\n/* harmony export */   getPublicId: () => (/* binding */ getPublicId),\n/* harmony export */   getTransformations: () => (/* binding */ getTransformations),\n/* harmony export */   objectHasKey: () => (/* binding */ objectHasKey),\n/* harmony export */   parseUrl: () => (/* binding */ parseUrl),\n/* harmony export */   sortByKey: () => (/* binding */ sortByKey),\n/* harmony export */   testColorIsHex: () => (/* binding */ testColorIsHex)\n/* harmony export */ });\n// src/lib/cloudinary.ts\nvar REGEX_VERSION = /\\/v\\d+\\//;\nvar REGEX_FORMAT = /\\.(ai|avif|gif|png|webp|bmp|bw|djvu|dng|ps|ept|eps|eps3|fbx|flif|gif|glb|gltf|heif|heic|ico|indd|jpg|jpe|jpeg|jp2|wdp|jxr|hdp|obj|pdf|ply|png|psd|arw|cr2|svg|tga|tif|tiff|u3ma|usdz|webp|3g2|3gp|avi|flv|m3u8|ts|m2ts|mts|mov|mkv|mp4|mpeg|mpd|mxf|ogv|webm|wmv)$/i;\nvar REGEX_URL = /https?:\\/\\/(?<host>[^\\/]+)\\/(?<cloudName>[^\\/]+)\\/(?<assetType>image|images|video|videos|raw|files)\\/(?<deliveryType>upload|fetch|private|authenticated|sprite|facebook|twitter|youtube|vimeo)?\\/?(?<signature>s--([a-zA-Z0-9\\_\\-]{8}|[a-zA-Z0-9\\_\\-]{32})--)?\\/?(?<transformations>(?:[^_\\/]+_[^,\\/]+,?\\/?)*\\/)*(?<version>v\\d+|\\w{1,2})\\/(?<publicId>[^\\s]+)$/;\nvar ASSET_TYPES_SEO = [\n    \"images\",\n    \"videos\",\n    \"files\"\n];\nfunction parseUrl(src) {\n    var _a, _b, _c, _d;\n    if (typeof src !== \"string\") {\n        throw new Error(`Failed to parse URL: Invalid src of type ${typeof src}`);\n    }\n    const hasVersion = REGEX_VERSION.test(src);\n    if (!hasVersion) {\n        throw new Error(`Invalid src: Does not include version (Ex: /v1234/)`);\n    }\n    const [baseUrlWithExtension, queryString] = src.split(\"?\");\n    const format = getFormat(baseUrlWithExtension);\n    let baseUrl = baseUrlWithExtension;\n    if (format) {\n        baseUrl = baseUrlWithExtension.replace(new RegExp(`${format}$`), \"\");\n    }\n    const results = baseUrl.match(REGEX_URL);\n    const transformations = (_b = (_a = results == null ? void 0 : results.groups) == null ? void 0 : _a.transformations) == null ? void 0 : _b.split(\"/\").filter((t)=>!!t);\n    const parts = {\n        ...results == null ? void 0 : results.groups,\n        format,\n        seoSuffix: void 0,\n        transformations: transformations || [],\n        queryParams: {},\n        version: ((_c = results == null ? void 0 : results.groups) == null ? void 0 : _c.version) ? parseInt(results.groups.version.replace(\"v\", \"\")) : void 0\n    };\n    if (queryString) {\n        parts.queryParams = queryString.split(\"&\").reduce((prev, curr)=>{\n            const [key, value] = curr.split(\"=\");\n            prev[key] = value;\n            return prev;\n        }, {});\n    }\n    if (parts.assetType && ASSET_TYPES_SEO.includes(parts.assetType)) {\n        const publicIdParts = ((_d = parts.publicId) == null ? void 0 : _d.split(\"/\")) || [];\n        parts.seoSuffix = publicIdParts.pop();\n        parts.publicId = publicIdParts.join(\"/\");\n    }\n    if (parts.publicId) {\n        parts.publicId = decodeURIComponent(parts.publicId);\n    }\n    return parts;\n}\nfunction getPublicId(src) {\n    const { publicId } = parseUrl(src) || {};\n    return publicId;\n}\nfunction getTransformations(src) {\n    const { transformations = [] } = parseUrl(src) || {};\n    return transformations.map((t)=>t.split(\",\"));\n}\nfunction getFormat(src) {\n    const matches = src.match(REGEX_FORMAT);\n    if (matches === null) return;\n    return matches[0];\n}\n// src/lib/colors.ts\nfunction testColorIsHex(value) {\n    if (typeof value !== \"string\") return false;\n    return !!value.startsWith(\"#\");\n}\nfunction convertColorHexToRgb(value) {\n    return `rgb:${value.replace(\"#\", \"\")}`;\n}\n// src/lib/util.ts\nfunction encodeBase64(value) {\n    if (typeof btoa === \"function\") {\n        return btoa(value);\n    }\n    if (typeof Buffer !== \"undefined\") {\n        return Buffer.from(value).toString(\"base64\");\n    }\n}\nfunction objectHasKey(obj, key) {\n    return Object.prototype.hasOwnProperty.call(obj, key);\n}\nfunction sortByKey(array = [], key, type = \"asc\") {\n    function compare(a, b) {\n        let keyA = a[key];\n        let keyB = b[key];\n        if (typeof keyA === \"string\") {\n            keyA = keyA.toLowerCase();\n        }\n        if (typeof keyB === \"string\") {\n            keyB = keyB.toLowerCase();\n        }\n        if (keyA < keyB) {\n            return -1;\n        }\n        if (keyA > keyB) {\n            return 1;\n        }\n        return 0;\n    }\n    let newArray = [\n        ...array\n    ];\n    if (typeof key !== \"string\") return newArray;\n    newArray = newArray.sort(compare);\n    if (type === \"desc\") {\n        return newArray.reverse();\n    }\n    return newArray;\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@cloudinary-util/url-loader/node_modules/@cloudinary-util/util/dist/index.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@cloudinary-util/util/dist/index.mjs":
/*!***********************************************************!*\
  !*** ./node_modules/@cloudinary-util/util/dist/index.mjs ***!
  \***********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   convertColorHexToRgb: () => (/* binding */ convertColorHexToRgb),\n/* harmony export */   encodeBase64: () => (/* binding */ encodeBase64),\n/* harmony export */   getFormat: () => (/* binding */ getFormat),\n/* harmony export */   getPublicId: () => (/* binding */ getPublicId),\n/* harmony export */   getTransformations: () => (/* binding */ getTransformations),\n/* harmony export */   objectHasKey: () => (/* binding */ objectHasKey),\n/* harmony export */   parseUrl: () => (/* binding */ parseUrl),\n/* harmony export */   sortByKey: () => (/* binding */ sortByKey),\n/* harmony export */   testColorIsHex: () => (/* binding */ testColorIsHex)\n/* harmony export */ });\n// src/lib/cloudinary.ts\nvar REGEX_VERSION = /\\/v\\d+\\//;\nvar REGEX_FORMAT = /\\.(ai|avif|gif|png|webp|bmp|bw|djvu|dng|ps|ept|eps|eps3|fbx|flif|gif|glb|gltf|heif|heic|ico|indd|jpg|jpe|jpeg|jp2|wdp|jxr|hdp|obj|pdf|ply|png|psd|arw|cr2|svg|tga|tif|tiff|u3ma|usdz|webp|3g2|3gp|avi|flv|m3u8|ts|m2ts|mts|mov|mkv|mp4|mpeg|mpd|mxf|ogv|webm|wmv)$/i;\nvar REGEX_URL = /https?:\\/\\/(?<host>[^\\/]+)\\/(?<cloudName>[^\\/]+)\\/(?<assetType>image|images|video|videos|raw|files)\\/(?<deliveryType>upload|fetch|private|authenticated|sprite|facebook|twitter|youtube|vimeo)?\\/?(?<signature>s--([a-zA-Z0-9\\_\\-]{8}|[a-zA-Z0-9\\_\\-]{32})--)?\\/?(?<transformations>(?:[^_\\/]+_[^,\\/]+,?\\/?)*\\/)*(?<version>v\\d+|\\w{1,2})\\/(?<publicId>[^\\s]+)$/;\nvar ASSET_TYPES_SEO = [\n    \"images\",\n    \"videos\",\n    \"files\"\n];\nfunction parseUrl(src) {\n    var _a, _b, _c, _d;\n    if (typeof src !== \"string\") {\n        throw new Error(`Failed to parse URL: Invalid src of type ${typeof src}`);\n    }\n    const hasVersion = REGEX_VERSION.test(src);\n    if (!hasVersion) {\n        throw new Error(`Invalid src: Does not include version (Ex: /v1234/)`);\n    }\n    const [baseUrlWithExtension, queryString] = src.split(\"?\");\n    const format = getFormat(baseUrlWithExtension);\n    let baseUrl = baseUrlWithExtension;\n    if (format) {\n        baseUrl = baseUrlWithExtension.replace(new RegExp(`${format}$`), \"\");\n    }\n    const results = baseUrl.match(REGEX_URL);\n    const transformations = (_b = (_a = results == null ? void 0 : results.groups) == null ? void 0 : _a.transformations) == null ? void 0 : _b.split(\"/\").filter((t)=>!!t);\n    const parts = {\n        ...results == null ? void 0 : results.groups,\n        format,\n        seoSuffix: void 0,\n        transformations: transformations || [],\n        queryParams: {},\n        version: ((_c = results == null ? void 0 : results.groups) == null ? void 0 : _c.version) ? parseInt(results.groups.version.replace(\"v\", \"\")) : void 0\n    };\n    if (queryString) {\n        parts.queryParams = queryString.split(\"&\").reduce((prev, curr)=>{\n            const [key, value] = curr.split(\"=\");\n            prev[key] = value;\n            return prev;\n        }, {});\n    }\n    if (parts.assetType && ASSET_TYPES_SEO.includes(parts.assetType)) {\n        const publicIdParts = ((_d = parts.publicId) == null ? void 0 : _d.split(\"/\")) || [];\n        parts.seoSuffix = publicIdParts.pop();\n        parts.publicId = publicIdParts.join(\"/\");\n    }\n    if (parts.publicId) {\n        parts.publicId = decodeURIComponent(parts.publicId);\n    }\n    return parts;\n}\nfunction getPublicId(src) {\n    const { publicId } = parseUrl(src) || {};\n    return publicId;\n}\nfunction getTransformations(src) {\n    const { transformations = [] } = parseUrl(src) || {};\n    return transformations.map((t)=>t.split(\",\"));\n}\nfunction getFormat(src) {\n    const matches = src.match(REGEX_FORMAT);\n    if (matches === null) return;\n    return matches[0];\n}\n// src/lib/colors.ts\nfunction testColorIsHex(value) {\n    if (typeof value !== \"string\") return false;\n    return !!value.startsWith(\"#\");\n}\nfunction convertColorHexToRgb(value) {\n    return `rgb:${value.replace(\"#\", \"\")}`;\n}\n// src/lib/util.ts\nfunction encodeBase64(value) {\n    if (typeof btoa === \"function\") {\n        return btoa(value);\n    }\n    if (typeof Buffer !== \"undefined\") {\n        return Buffer.from(value).toString(\"base64\");\n    }\n}\nfunction objectHasKey(obj, key) {\n    return Object.prototype.hasOwnProperty.call(obj, key);\n}\nfunction sortByKey(array = [], key, type = \"asc\") {\n    function compare(a, b) {\n        let keyA = a[key];\n        let keyB = b[key];\n        if (typeof keyA === \"string\") {\n            keyA = keyA.toLowerCase();\n        }\n        if (typeof keyB === \"string\") {\n            keyB = keyB.toLowerCase();\n        }\n        if (keyA < keyB) {\n            return -1;\n        }\n        if (keyA > keyB) {\n            return 1;\n        }\n        return 0;\n    }\n    let newArray = [\n        ...array\n    ];\n    if (typeof key !== \"string\") return newArray;\n    newArray = newArray.sort(compare);\n    if (type === \"desc\") {\n        return newArray.reverse();\n    }\n    return newArray;\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@cloudinary-util/util/dist/index.mjs\n");

/***/ })

};
;